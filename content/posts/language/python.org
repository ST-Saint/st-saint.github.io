#+TITLE: Python
#+date: Sun Apr 03 11:18:36 CST 2022
#+categories[]: programming_languages
#+tags[]: python
#+summary: Python


* String & Bytes
** bytes to string
#+begin_src python
return b"abc123".decode("utf-8")
#+end_src

#+RESULTS:
: abc123
** string to bytes
#+begin_src python
return "abc123".encode("utf-8")
#+end_src

#+RESULTS:
: b'abc123'

* Virtual Env

** create
#+begin_src shell
python -m venv NAME
#+end_src

** activate
#+begin_src shell
source NAME/bin/activate
#+end_src

** deactivate
#+begin_src shel
deactivate
#+end_src


* Arguments

** argparse
#+begin_src python
  import argparse

  # Create the parser object
  parser = argparse.ArgumentParser(description="Process something")

  # Add an argument to the parser
  parser.add_argument(
      "-i",
      "--integers",
      metavar="N",
      required=True,
      type=int,
      help="an integer to be processed",
  )

  # Parse the arguments
  args = parser.parse_args()

  # Access the parsed arguments
  print(args.integers)
#+end_src


* File

** file exists
#+begin_src python
import os

filename = "example.txt"
if os.path.exists(filename):
    print("File exists")
else:
    print("File does not exist")
#+end_src

** parent dir
#+begin_src python
import os

parent_dir = os.path.dirname(file_path)
#+end_src


** path join
#+begin_src python
import os

path1 = "/path/to/directory"
path2 = "subdirectory"
filename = "file.txt"
joined_path = os.path.join(path1, path2, filename)
print(joined_path)
#+end_src

** directory create
#+begin_src python
import os

directory = "/path/to/directory"

if not os.path.exists(directory):
    os.makedirs(directory)
    print("Directory created:", directory)
else:
    print("Directory already exists:", directory)
#+end_src

* threads

** thread pool
#+begin_src python
import concurrent.futures

def execute_command(command):
    process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    stdout, stderr = process.communicate()
    return stdout, stderr

commands = [
    ['ls', '-l'],
    ['echo', 'Hello, world!'],
    ['pwd']
]

with concurrent.futures.ThreadPoolExecutor(max_workers=3) as executor:
    # Submit tasks to the thread pool
    future_results = [executor.submit(execute_command, command) for command in commands]

    # Get the results as they become available
    for future in concurrent.futures.as_completed(future_results):
        stdout, stderr = future.result()
        print("Standard Output:")
        print(stdout)
#+end_src

* Random
** choice
#+begin_src python
import random

random.choice([1, 2, 3, 4, 5])
#+end_src
** uuid
#+begin_src python
import uuid

uuid.uuid4()
#+end_src

* Data process
** unique
#+begin_src python
import numpy as np

return np.unique([1, 1, 3, 2, 3])
#+end_src


* Json

** load from file
#+begin_src python
with open('data.json', 'r') as f:
    data = json.load(f)

print(data)
#+end_src

** dump to file

#+begin_src python
with open('data.json', 'w') as f:
    json.dump(data, f)
#+end_src


** dump class to file
#+begin_src python
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

person = Person("John Smith", 35)

with open('person.json', 'w') as f:
    json.dump(person.__dict__, f)
#+end_src


** load class from file

#+begin_src python
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

with open('person.json', 'r') as f:
    data = json.load(f)
    person = Person(data['name'], data['age'])

print(person.name)
print(person.age)
#+end_src

* Time
#+begin_src python
from time import gmtime, localtime, strftime

def print_gmtime():
    strftime("%a, %d %b %Y %H:%M:%S +0000", gmtime())

def print_localtime():
    return strftime("%a, %d %b %Y %H:%M:%S +0000", localtime())
#+end_src

#+RESULTS:
: None

** duration
#+begin_src python
import time
start_time = time.perf_counter()
end_time = time.perf_counter()
elapsed_time = end_time - start_time
print(elapsed_time * 1000, "ms")
#+end_src

#+RESULTS:
: 0.00015999830793589354


* socket

** server
#+begin_src python
# Echo server program
import socket
from time import gmtime, strftime

HOST = '127.0.0.1'                 # Symbolic name meaning all available interfaces
PORT = 50007              # Arbitrary non-privileged port
with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
    s.bind((HOST, PORT))
    s.listen(1)
    conn, addr = s.accept()
    with conn:
        print('Connected by', addr)
        while True:
            data = conn.recv(1024)
            print(strftime("%a, %d %b %Y %H:%M:%S +0000", gmtime()) + "receive: " + str(data))
            if not data: break
            conn.sendall(data)
#+end_src

** client
#+begin_src python
# Echo client program
import socket
import time

HOST = '127.0.0.1'    # The remote host
PORT = 50007              # The same port as used by the server
with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
    s.connect((HOST, PORT))
    while True:
        s.sendall(b'Hello, world')
        data = s.recv(1024)
        print('Received', repr(data))
        time.sleep(1)
#+end_src

* class
** super
 + 理论上 =super()= 可以直接 call 嗷, 返回父类
   - 调用父类函数时候, self指向的是子类

 + 多继承的时候, 直接 =super().func()= 会从 mro 中, 从第二个找拥有 =func()= 的类
   - 如果使用 =super(clazz, self).func()= 则会从 clazz.mro 中的第二个类开始找
** enum
#+begin_src python
from enum import Enum

class Color(Enum):
    RED = 1
    GREEN = 2
    BLUE = 3

print(Color.RED)         # Output: Color.RED
print(Color.GREEN)       # Output: Color.GREEN
print(Color.BLUE)        # Output: Color.BLUE

print(Color.RED.value)   # Output: 1
print(Color.GREEN.value) # Output: 2
print(Color.BLUE.value)  # Output: 3
#+end_src


* plot

- networkx \rightarrow graphviz

** networkx to graphviz

#+begin_src python
import graphviz
import networkx as nx

G = nx.DiGraph()
# G.add_node(u)
# G.add_edge(u, v, label=label)
A = nx.nx_agraph.to_agraph(G)
A.layout("dot")
A.draw('graph.pdf')
#+end_src

** colormesh (heatmap)
#+begin_src python
import matplotlib.pyplot as plt
import numpy as np

# generate 2 2d grids for the x & y bounds
y, x = np.meshgrid(np.linspace(-3, 3, 100), np.linspace(-3, 3, 100))

z = (1 - x / 2. + x ** 5 + y ** 3) * np.exp(-x ** 2 - y ** 2)
# x and y are bounds, so z should be the value *inside* those bounds.
# Therefore, remove the last value from the z array.
z = z[:-1, :-1]
z_min, z_max = -np.abs(z).max(), np.abs(z).max()

fig, ax = plt.subplots()

c = ax.pcolormesh(x, y, z, cmap='RdBu', vmin=z_min, vmax=z_max)
ax.set_title('pcolormesh')
# set the limits of the plot to the limits of the data
ax.axis([x.min(), x.max(), y.min(), y.max()])
fig.colorbar(c, ax=ax)

plt.show()
#+end_src

** standard deviation / std / error bar
#+begin_src python
import matplotlib.pyplot as plt

plt.errorbar(x, y_mean, y_std, linestyle='None', marker='^')
#+end_src


** dot
- example
#+begin_src example
digraph {
  rankdir=LR;
  node [shape=ellipse];
  edge [color=red];

  A [label="Start"];
  B [label="Read input"];
  C [label="Process input"];
  D [label="Write output"];
  E [label="Stop"];

  A -> B;
  B -> C;
  C -> D [label="Yes"];
  D -> E;
  C -> E [label="No"];

  {rank=same; B C}
}
#+end_src


*** cli
#+begin_src shell
dot -Tpng -Kdot -odot.png example.dot
#+end_src

* pandas

** from list
#+begin_src python
import pandas as pd

df = pd.DataFrame(
    [["wyy", "Pad Gra Paow", 80, "good", "2023-06-05 Mon"]],
    columns=["reviewer", "dish", "score", "comment", "date"],
)
#+end_src

** to json

#+begin_src python
import pandas as pd

df = pd.DataFrame(
    [["wyy", "Pad Gra Paow", 80, "good", "2023-06-05 Mon"]],
    columns=["reviewer", "dish", "score", "comment", "date"],
)

return df.to_json(orient='split', force_ascii=False) # use unicode
#+end_src

** groupby
#+begin_src python
df = df[["restaurant", "score"]].groupby('restaurant').mean()
#+end_src

*** count
#+begin_src python
review_df[["reviewer"]].groupby("reviewer").size().sort_values(ascending=False)
#+end_src

** unique
#+begin_src python
pd.unique(review_df["restaurant"])
#+end_src


** reverse
#+begin_src python
df = df.iloc[::-1]
#+end_src


** to markdown
#+begin_src python
import pandas as pd

df = pd.DataFrame(
    [["wyy", "Pad Gra Paow", 80, "good", "2023-06-05 Mon"]],
    columns=["reviewer", "dish", "score", "comment", "date"],
)
return df.to_markdown()
#+end_src

** concat
#+begin_src python
import pandas as pd

pd.concat([data1, data2])
#+end_src

*** horizontal
#+begin_src python
import pandas as pd

pd.concat([data1, data2], axis=1)
#+end_src

** reset index
#+begin_src python
import pandas as pd

pd.concat([...]).reset_index(drop=True)
#+end_src

** for loop/iterate
#+begin_src python
import pandas as pd

df = pd.DataFrame({'c1': [10, 11, 12], 'c2': [100, 110, 120]})
df = df.reset_index()  # make sure indexes pair with number of rows

for index, row in df.iterrows():
    print(index, row)
#+end_src

** convert to numeric
#+begin_src python
df['score'] = pd.to_numeric(df['score'])
#+end_src

** drop
#+begin_src python
df.drop(index='cow', columns='small')
#+end_src

* numpy

** percent
#+begin_src python
import numpy as np
np.percentile(arr, 99.9)
#+end_src

** std
#+begin_src python
import numpy as np
np.std(array)
#+end_src


* type

** return void
#+begin_src python
def func() -> None:
    return
#+end_src

* regex
#+begin_src python
import re

re.sub('[a-z]+@', 'ABC@', s, 2)
#+end_src
