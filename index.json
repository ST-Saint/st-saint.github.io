[{"categories":[],"content":" Node.js and V8 Getting started guide to Node.js, the server-side JavaScript runtime environment. Node.js is built on top of the Google Chrome V8 JavaScript engine, and it's mainly used to create web servers - but it's not limited to just that. Node.js uses an event driven, non-blocking I/O model MERN(MongoDB, ExpressJS, ReactJS and Node.js) stack ","date":"2023-05-06","objectID":"/javascript/:1:0","tags":[],"title":"JavaScript","uri":"/javascript/"},{"categories":[],"content":" V8 JavaScript Engine V8 is the name of the JavaScript engine that powers Google Chrome. It's the thing that takes our JavaScript and executes it while browsing with Chrome. V8 provides the runtime environment in which JavaScript executes. The DOM and the other Web Platform APIs are provided by the browser. V8 uses Just-in-time (JIT) compilation, which converts the native JavaScript code to machine code. So, the difference between V8 code and others is that it does not produce any intermediate code. Runtime the Ignition interpreter compiles the JavaScript code and generates non-optimized machine code. The machine code is analyzed and re-compiled for best performance, by the Turbofan and Crankshaft. Liftoff is responsible for machine code generation in a highly optimized way. It generates code for each opcode and perform way better then Turbofan. Orinoco is responsible for garbage collection. It looks for disconnected memory allocations and perform operations to free up more space. It also update the pointers to new memory locations. ","date":"2023-05-06","objectID":"/javascript/:1:1","tags":[],"title":"JavaScript","uri":"/javascript/"},{"categories":["program_languages"],"content":" Instruction Set Architecture ","date":"2023-03-21","objectID":"/assembly/:1:0","tags":["Assembly"],"title":"Assembly","uri":"/assembly/"},{"categories":["program_languages"],"content":" representation LLVM Intel Meaning COMMONDq command qword ptr qword (64bit) ","date":"2023-03-21","objectID":"/assembly/:1:1","tags":["Assembly"],"title":"Assembly","uri":"/assembly/"},{"categories":["side-channel"],"content":" SLH ","date":"2023-03-21","objectID":"/slh/:1:0","tags":["SLH","side-channel"],"title":"SLH","uri":"/slh/"},{"categories":["side-channel"],"content":" LLVM SLH https://llvm.org/docs/SpeculativeLoadHardening.html sample original void leak(int data); void example(int* pointer1, int* pointer2) { if (condition) { // ... lots of code ... leak(*pointer1); } else { // ... more code ... leak(*pointer2); } } transformation uintptr_t all_ones_mask = std::numerical_limits\u003cuintptr_t\u003e::max(); uintptr_t all_zeros_mask = 0; void leak(int data); void example(int* pointer1, int* pointer2) { uintptr_t predicate_state = all_ones_mask; if (condition) { // Assuming ?: is implemented using branchless logic... predicate_state = !condition ? all_zeros_mask : predicate_state; // ... lots of code ... // // Harden the pointer so it can't be loaded pointer1 \u0026= predicate_state; leak(*pointer1); } else { predicate_state = condition ? all_zeros_mask : predicate_state; // ... more code ... // // Alternative: Harden the loaded value int value2 = *pointer2 \u0026 predicate_state; leak(value2); } } uintptr_t all_ones_mask = std::numerical_limits\u003cuintptr_t\u003e::max(); uintptr_t all_zeros_mask = 0; void leak(int data); void example(int* pointer1, int* pointer2) { uintptr_t predicate_state = all_ones_mask; switch (condition) { case 0: // Assuming ?: is implemented using branchless logic... predicate_state = (condition != 0) ? all_zeros_mask : predicate_state; // ... lots of code ... // // Harden the pointer so it can't be loaded pointer1 \u0026= predicate_state; leak(*pointer1); break; case 1: predicate_state = (condition != 1) ? all_zeros_mask : predicate_state; // ... more code ... // // Alternative: Harden the loaded value int value2 = *pointer2 \u0026 predicate_state; leak(value2); break; // ... } } implementation details accumulating the predicate state through the control flow graph We accumulate it using the x86 conditional move instruction (cmov*) which also reads the flag registers where the state resides these conditional move instructions are not to be predicted along each edge coming out of a conditional branch we do a conditional move that in a correct execution will be a no-op, but if misspeculated, will replace the %rax with the value of %r8. indirect branch, call and return we need to check where we came from rather than where we are going test the input to the jump table within each destination sample # %bb.0: # %entry pushq %rax testl %edi, %edi jne .LBB0_4 # %bb.1: # %then1 testl %esi, %esi jne .LBB0_4 # %bb.2: # %then2 testl %edx, %edx je .LBB0_3 .LBB0_4: # %exit popq %rax retq .LBB0_3: # %danger movl (%rcx), %edi callq leak popq %rax retq ----- # %bb.0: # %entry pushq %rax xorl %eax, %eax # Zero out initial predicate state. movq $-1, %r8 # Put all-ones mask into a register. testl %edi, %edi jne .LBB0_1 # %bb.2: # %then1 cmovneq %r8, %rax # Conditionally update predicate state. testl %esi, %esi jne .LBB0_1 # %bb.3: # %then2 cmovneq %r8, %rax # Conditionally update predicate state. testl %edx, %edx je .LBB0_4 .LBB0_1: cmoveq %r8, %rax # Conditionally update predicate state. popq %rax retq .LBB0_4: # %danger cmovneq %r8, %rax # Conditionally update predicate state. ... ----- pushq %rax xorl %eax, %eax # Zero out initial predicate state. movq $-1, %r8 # Put all-ones mask into a register. jmpq *.LJTI0_0(,%rdi,8) # Indirect jump through table. .LBB0_2: # %sw.bb testq $0, %rdi # Validate index used for jump table. cmovneq %r8, %rax # Conditionally update predicate state. ... jmp _Z4leaki # TAILCALL .LBB0_3: # %sw.bb1 testq $1, %rdi # Validate index used for jump table. cmovneq %r8, %rax # Conditionally update predicate state. ... jmp _Z4leaki # TAILCALL .LBB0_5: # %sw.bb10 testq $2, %rdi # Validate index used for jump table. cmovneq %r8, %rax # Conditionally update predicate state. ... jmp _Z4leaki # TAILCALL ... .section .rodata,\"a\",@progbits .p2align 3 .LJTI0_0: .quad .LBB0_2 .quad .LBB0_3 .quad .LBB0_5 ... checking the loads checking control transfers between procedures ","date":"2023-03-21","objectID":"/slh/:1:1","tags":["SLH","side-channel"],"title":"SLH","uri":"/slh/"},{"categories":["side-channel"],"content":" Strong SLH protect againt all Spectre v1 attacks divide the address space into a private and a public heap still leak the information by writing it into the public heap or through address-based side-channel Load address hardening SSLH assumes that all addresses of loads are protected LLVM-aSLH abstains from protecting \"fixed\" address (both the memory base and memory index are known at compile time). Not safe for stack pointer? skip the instrution pointer Store address hardening LLVM-aSLH does not harden addresses of store instruction the projection logic should be same as the load branch hardening branch conditons depend on the speculation predicate ","date":"2023-03-21","objectID":"/slh/:1:2","tags":["SLH","side-channel"],"title":"SLH","uri":"/slh/"},{"categories":["Misc"],"content":" Aur LLVM90 compilation error ","date":"2023-03-20","objectID":"/llvm9-compilation/:1:0","tags":["bugs"],"title":"llvm-project/llvm/utils/benchmark/src/benchmark_register.h:17:30","uri":"/llvm9-compilation/"},{"categories":["Misc"],"content":" error llvm-project/llvm/utils/benchmark/src/benchmark_register.h:17:30: error: 'numeric_limits' is not a member of 'std' 17 | static const T kmax = std::numeric_limits\u003cT\u003e::max(); | ^~~~~~~~~~~~~~ ","date":"2023-03-20","objectID":"/llvm9-compilation/:1:1","tags":["bugs"],"title":"llvm-project/llvm/utils/benchmark/src/benchmark_register.h:17:30","uri":"/llvm9-compilation/"},{"categories":["Misc"],"content":" patch llvm/utils/benchmark: add missing \u003climits\u003e inclusion // /llvm-9.0.1.src/utils/benchmark/src/benchmark_register.h + #include \u003climits\u003e #include \u003cvector\u003e ","date":"2023-03-20","objectID":"/llvm9-compilation/:1:2","tags":["bugs"],"title":"llvm-project/llvm/utils/benchmark/src/benchmark_register.h:17:30","uri":"/llvm9-compilation/"},{"categories":["program_languages"],"content":" Cargo Cargo is the Rust package manager. options descriptions build compile and build the project ","date":"2023-03-20","objectID":"/rust/:1:0","tags":["Rust"],"title":"Rust","uri":"/rust/"},{"categories":["side-channel"],"content":" Constant-time In order for a function to be constant time, the branches taken and memory addresses accessed must be independent of any secret inputs Assuming that the fundamental processor instructions are constant time Tough to write and modify. Hard to verify ","date":"2023-03-10","objectID":"/ctgrind/:1:0","tags":["constant-time","side-channel"],"title":"ctgrind","uri":"/ctgrind/"},{"categories":["side-channel"],"content":" Solutions A typical input to exercise every instruction so type system may not be necessary Valgrind could check all the branches and memory accesses to make sure that they haven't been tainted with secret data. Keeping track of every bit in memory to know if it's secret or not, likewise for all the CPU registers at bit level. Memcheck has done that. Just tell memcheck to treat the secret data as uninitialized ","date":"2023-03-10","objectID":"/ctgrind/:2:0","tags":["constant-time","side-channel"],"title":"ctgrind","uri":"/ctgrind/"},{"categories":["side-channel"],"content":" notes The idea here is that any usage of secret data is unsafe. Memcheck helps to indentify all the usage of uninitialized data which is consistent with the secret data flow. This memcheck mechanism can just track the usage of the secret data. It could detect and help to elimitate using secret data as a condition, an index (hopefully also include the the address/pointer). REVIEW I feel this is sound, so what is the problem of ctgrind? Maybe it does not explore all the paths and hardware is hard to model https://blog.cr.yp.to/20140517-insns.html ","date":"2023-03-10","objectID":"/ctgrind/:2:1","tags":["constant-time","side-channel"],"title":"ctgrind","uri":"/ctgrind/"},{"categories":["side-channel"],"content":" Misc A type system could probably help here ","date":"2023-03-10","objectID":"/ctgrind/:3:0","tags":["constant-time","side-channel"],"title":"ctgrind","uri":"/ctgrind/"},{"categories":["Diary"],"content":" \u003c2023-05-05 Fri\u003e 换到loveit咯, 不错不错 taxonomy 排序 多语言 用cherry是不是可以把 Spectre-STL 的表达式转成单个变量表达式判断相等呢 ","date":"2023-03-03","objectID":"/diary/:1:0","tags":["Diary"],"title":"Diary","uri":"/diary/"},{"categories":["Diary"],"content":" \u003c2023-04-03 Mon\u003e Ok, I guess math is also philosophy Programming language is also philosophy ","date":"2023-03-03","objectID":"/diary/:2:0","tags":["Diary"],"title":"Diary","uri":"/diary/"},{"categories":["Diary"],"content":" \u003c2023-03-19 Sun\u003e[2/4] 人贵自知 它猫猫的 怎么这么多b事 ","date":"2023-03-03","objectID":"/diary/:3:0","tags":["Diary"],"title":"Diary","uri":"/diary/"},{"categories":["Diary"],"content":" TODO Constant-time + Data-oblivious 读+测试 binsec/rel + pitchfork ","date":"2023-03-03","objectID":"/diary/:3:1","tags":["Diary"],"title":"Diary","uri":"/diary/"},{"categories":["Diary"],"content":" TODO ebpf parse bpd bytecode 带 indirect jump 的 code 要怎么 parse 啊? instrument USLH 真的有必要 USLH 吗, 又有点忘了 还真要, USLH 多了 rep, arith 虽然不知道为什么需要特殊处理 arith ","date":"2023-03-03","objectID":"/diary/:3:2","tags":["Diary"],"title":"Diary","uri":"/diary/"},{"categories":["Diary"],"content":" DONE type-system 做个 TAL/checked-C ++ 算了 普通 taint analysis 分析 secret independent control-flow + memory access ","date":"2023-03-03","objectID":"/diary/:3:3","tags":["Diary"],"title":"Diary","uri":"/diary/"},{"categories":["Diary"],"content":" DONE upfuzz dinv reconstruct output stream 普通记录个 bytestream 先 ","date":"2023-03-03","objectID":"/diary/:3:4","tags":["Diary"],"title":"Diary","uri":"/diary/"},{"categories":["Diary"],"content":" \u003c2023-03-14 Tue\u003e 怪不得故事里的反派会一脸欢愉地盘算着阴谋诡计，我终于有些理解他们的心情了 emacs 配置真难做吧, project + vertico 搭配不好, sort 又慢, 可能还得自己写 cache 或者等 project.el 自己加 sort, workspace 也难搞的一b, 为什么所有人想的都是 restore 一个 layout 呢, 就没有人想单纯的切换一个基于 project 隔离 buffer 的工作区吗 居然一晚上自己搞好了, 我真nb ","date":"2023-03-03","objectID":"/diary/:4:0","tags":["Diary"],"title":"Diary","uri":"/diary/"},{"categories":["Diary"],"content":" \u003c2023-03-09 Thu\u003e[0/0] 这些个 b paper 给个 git repo 不带 docker 给个勾八跑不起来的脚本全 tm 狗屎狗屎狗屎 bsbsbs ","date":"2023-03-03","objectID":"/diary/:5:0","tags":["Diary"],"title":"Diary","uri":"/diary/"},{"categories":["Diary"],"content":" \u003c2023-03-08 Wed\u003e[0/4] fk trt, 怎么会这么 jb 冷啊, 5点钟太阳直接照瞎, dt 还没地方玩 secure boot 好像也只是一个 checksum 证明一个 OS/image 是你知道的那个 image 吧, 但是也没有证明这个 OS/image 有哪个些 property 啊. 比如一个 application contact 说我不会恶意监控你的 sensor 扫你的盘, 我怎么知道这个 app 会不会遵守协议. 在 cloud 上对所有 application 先做 verification 加个 signature 再允许部署不好吗, 直接解决 peer adversary 的问题. 当然要 verify 的好像有点多 zero-knowledge 到底能证明什么 knowledge 啊, 感觉不能验证上面的东西, 但是只是证明自己知道个数也太弱了吧 network QoS的问题, 如果 NIC 一直 duplicate packet 去到两个独立的 server, 是不是用两倍的 bandwidth + server 资源可以保证 2-p 的 QoS. 不过 2-p 的 QoS 好像也没好到哪去…… ","date":"2023-03-03","objectID":"/diary/:6:0","tags":["Diary"],"title":"Diary","uri":"/diary/"},{"categories":["Diary"],"content":" \u003c2023-03-03 Fri\u003e[1/1] DEFCON 上面应该没有 serverlesss attack 的 talk, 应该需要在 blackhat 上找找 blackhat 也没有 ","date":"2023-03-03","objectID":"/diary/:7:0","tags":["Diary"],"title":"Diary","uri":"/diary/"},{"categories":["Diary"],"content":" \u003c2023-03-02 Thu\u003e[1/2] 为什么 Dynamic Link Library 跟 process isolation 可以兼容？process isolation 给每个 process 独立的 virtual address, 每个 process 访问 so 应该都需要拷贝一份到自己VA. 这 so 哪里 shared 了? 不知道为什么记错 VA 的概念了, 整个 system 都使用一个 Virtual Address Space, 只是每个 process 被分配到一段 exclusive 的区域, 以 page 管理 dynamic library 是通过 RWX ACL share 的, 如果一个 process 试图改变 dynamic library 的 permission, 内核直接创建一份 dynamic library 的 copy 防止 poisoning ebpf 的 data segment 在 verifier 阶段是不确定的吗？ code segment 应该已经确定了 base address 不然 verifier 怎么做到 rewrtie indirect jumps to direct jumps? code 确定 data 不确定这合理吗 ","date":"2023-03-03","objectID":"/diary/:8:0","tags":["Diary"],"title":"Diary","uri":"/diary/"},{"categories":["side-channel"],"content":" Related works ctgrind: dynamic analysis [Lan10] Flow-tracker: Rodrigues Silva [RQaPA16] ctverif: a static analyzer [ABB+16] ","date":"2023-03-01","objectID":"/dudect/:1:0","tags":["constant-time,","side-channel"],"title":"dudect","uri":"/dudect/"},{"categories":["side-channel"],"content":" drawback have to model the hardware correct hardware models are not easy to build [Ber14] ","date":"2023-03-01","objectID":"/dudect/:1:1","tags":["constant-time,","side-channel"],"title":"dudect","uri":"/dudect/"},{"categories":["side-channel"],"content":" Approach The approach is based on leakage detection tests Measure the execution time of 2 different input data classes ","date":"2023-03-01","objectID":"/dudect/:2:0","tags":["constant-time,","side-channel"],"title":"dudect","uri":"/dudect/"},{"categories":["side-channel"],"content":" Step 1. execution time classes definition fix-vs-random the first class input data is fixed to a constant value the second class input data is chosen at random for each measurement The fixed value might be chosen to trigger certain \"special\" corner-case processing (such as low-weight input for arithmetic operations). Cycle counters TSC register in intel systick peripheral in ARM Environmental conditions The class assignment and input preparation tasks are prior to the measurement ","date":"2023-03-01","objectID":"/dudect/:2:1","tags":["constant-time,","side-channel"],"title":"dudect","uri":"/dudect/"},{"categories":["side-channel"],"content":" Step 2. Apply post-processing cropping crop the measurements that are larger than a fixed, class-independent threshold Higher-order preprocessing idk Depending on the statistical test applied, it may be beneficial to apply some higherorder pre-processing, such as centered product [CJRR99] mimicking higher-order DPA attacks. Higher-order leakage detection tests already appeared in other contexts [SM15]. ","date":"2023-03-01","objectID":"/dudect/:2:2","tags":["constant-time,","side-channel"],"title":"dudect","uri":"/dudect/"},{"categories":["side-channel"],"content":" Step 3: Apply statistical test apply a statistical test to the hypothesis \"the two timing distributions are equal\" t-test Welch’s t-test Non-parametric tests rely on fewer assumptions about the underlying distributions converge slower and require more samples ","date":"2023-03-01","objectID":"/dudect/:2:3","tags":["constant-time,","side-channel"],"title":"dudect","uri":"/dudect/"},{"categories":["Side-Channel"],"content":" Notes ","date":"2023-02-21","objectID":"/ghostrider/:1:0","tags":["ORAM","Serverless","Constant-Time"],"title":"GhostRider","uri":"/ghostrider/"},{"categories":["Side-Channel"],"content":" MTO \u0026 ORAM Memory-trace obliviousness (MTO): Even an adversary that observes memory, bus traffic, and access times while the program executes can learn nothing about the program's sensitive input and output. One way to achieve MTO is to employ Obilivous RAM (ORAM), allocating all code and data in a single ORAM bank, and to also disable caches or fix the rate of memory traffic. Naive Implementations The simplest way to deploy ORAM is to implement a single, large ORAM bank that contains all the code and data 10x - 100x overhead ","date":"2023-02-21","objectID":"/ghostrider/:1:1","tags":["ORAM","Serverless","Constant-Time"],"title":"GhostRider","uri":"/ghostrider/"},{"categories":null,"content":" ((token, signature) =\u003e { return jwt.verify(token, signature) }) (\"eyJhbGciOiJIUzI1NiJ9.eyJuYW1lIjoiWWF5dSBXYW5nIiwiZW1haWwiOiJ5YXl1d2FuZ0Bjcy51YmMuY2EifQ.e-5G_qdh02Srl8TLWTPVld1SPHdusRKJHibCDiekVtc\", \"再次鼓起失去的勇气. Regain lost courage.\") ","date":"2023-02-19","objectID":"/email/:0:0","tags":null,"title":"Email","uri":"/email/"},{"categories":null,"content":" Terminology ","date":"2023-02-04","objectID":"/typesystem/:1:0","tags":null,"title":"Type System","uri":"/typesystem/"},{"categories":null,"content":" Judgement A judgement is something we may know, that is, an object of knowledge A judgement is evident if we in fact know it \\(e:t\\) ⇒ the expression e has type t \\(\\Gamma\\) ⇒ Context: a set of \u003cvariable, type\u003e pairs \\(\\vdash\\) ⇒ turnstile \\(\\Gamma \\vdash e : t\\) ⇒ expression e has type t in the context \\(\\Gamma\\) \\(\\Gamma , x:\\tau\\) ⇒ extends \\(\\Gamma\\) with knowledge: \\(x:\\tau\\) ","date":"2023-02-04","objectID":"/typesystem/:1:1","tags":null,"title":"Type System","uri":"/typesystem/"},{"categories":null,"content":" Inference Rules \\(\\frac{P1\\ P2\\ P3\\ ...}{C}\\) C ⇒ conclusion P ⇒ premise If we konw P1 \u0026 P2 \u0026 P3 then we know C Derivation In ML, a typing derivation is a proof that some expression can have some type, given a particular context, not that the expression can only have that type or that the expression will have that type no matter where we encounter it. a derivation for ρ ⊢ e : t is a proof that in some context ρ (which assigns types to variables in e), we can show that e can have (at least) the type t, and possibly others. The one-step evaluation relation → is the smallest binary relation on terms When the pair (t , t') is in the evaluation relation, we say that \"the evaluation statement (or judgment) t → t' is derivable.\" Derivation Tree \\begin{equation} \\notag \\large \\dfrac{\\dfrac{\\dfrac{x:Bool \\in x: Bool}{x:Bool \\vdash x:Bool}}{\\vdash \\lambda x:Bool . x : Bool \\rightarrow Bool} \\qquad \\dfrac{}{\\vdash true: Bool} }{\\vdash (\\lambda x: Bool.x )\\ true: Bool} \\end{equation} ","date":"2023-02-04","objectID":"/typesystem/:1:2","tags":null,"title":"Type System","uri":"/typesystem/"},{"categories":null,"content":" Reduction Also known as subject evaluation, type preservation or simply preservation $$\\frac{\\Gamma \\vdash e_1:\\tau\\qquad e_1 \\rightarrow e_2}{\\Gamma \\vdash e_2:\\tau}$$ $$\\frac{}{if\\ True\\ then\\ e1\\ else\\ e2 \\rightarrow e1}$$ $$\\frac{e \\Downarrow True}{if\\ e\\ then\\ e1\\ else\\ e2}$$ $${if\\ True\\ then\\ e1\\ else\\ e2\\ \\rightarrow\\ e1}$$ ","date":"2023-02-04","objectID":"/typesystem/:1:3","tags":null,"title":"Type System","uri":"/typesystem/"},{"categories":null,"content":" Substitution $$[x \\rightarrow s]x = s$$ $$e[x \\backslash e^a] == [ x \\rightarrow e^a] e$$ \\begin{align} \u0026 [ x \\rightarrow e^{'}](let y=e_1\\; in\\; e_2 ) \\\\ = \u0026 let y = [x \\rightarrow e^{'}]e_1\\; in\\; [x \\rightarrow e^{'}]e_2 \\end{align} ","date":"2023-02-04","objectID":"/typesystem/:1:4","tags":null,"title":"Type System","uri":"/typesystem/"},{"categories":null,"content":" Unification ","date":"2023-02-04","objectID":"/typesystem/:1:5","tags":null,"title":"Type System","uri":"/typesystem/"},{"categories":null,"content":" 推导 (deduction) ","date":"2023-02-04","objectID":"/typesystem/:1:6","tags":null,"title":"Type System","uri":"/typesystem/"},{"categories":null,"content":" landin' knot represent recursion 13.5.8 ","date":"2023-02-04","objectID":"/typesystem/:1:7","tags":null,"title":"Type System","uri":"/typesystem/"},{"categories":null,"content":" Refinement Types ","date":"2023-02-04","objectID":"/typesystem/:2:0","tags":null,"title":"Type System","uri":"/typesystem/"},{"categories":null,"content":" Introduction programs can do things wrong: Divided by zero Buffer overflow mismatched dimension wrong type casting logic bug integer range [min, max] Correctness error Refinement type system uses predicates to enrich the type information passes STCL branch conditions – path-sensitive infer refinements type polymorphism – context-sensitive polymorphic data types refinement polymorphism for different invariants verify termination??? proof proposition over UDF ","date":"2023-02-04","objectID":"/typesystem/:2:1","tags":null,"title":"Type System","uri":"/typesystem/"},{"categories":null,"content":" Simply Typed λ-calculus primitive constants: nat primitive operations: add function type with constrain Verification Conditions take the annotated program as input and return a VC arithmetic overflow seems like we can simply add a upper bound (2^31 or 2^63) to avoid overflow here ","date":"2023-02-04","objectID":"/typesystem/:2:2","tags":null,"title":"Type System","uri":"/typesystem/"},{"categories":null,"content":" Branches and Recursion also convert to branches conditions to similar VC ","date":"2023-02-04","objectID":"/typesystem/:2:3","tags":null,"title":"Type System","uri":"/typesystem/"},{"categories":null,"content":" questions Differences between refinement type system and symbolic execution To formally verify the division by, buffer overflow and integer range problems, refinement type system also add predicates and constrains over variable and use SMT solver to resolve these constrains, so what does refinement types do differently? or actually symbolic execution is one component of refinement type system? what would the refinement type system do if the conditions cannot be solved by SMT? if the condition cannot be satisfied, then it should be a logic bug? it is a bit confusing that how could you verify termination with a recursion function? ","date":"2023-02-04","objectID":"/typesystem/:2:4","tags":null,"title":"Type System","uri":"/typesystem/"},{"categories":null,"content":" Sized Types Input makes the program unpredictable. The inputs can taint data or even the control-flow, making memory mess and analysis tricky. Sized type system is to check computation of each stream element terminates. express bounds on the sizes of recursive data structures. ","date":"2023-02-04","objectID":"/typesystem/:3:0","tags":null,"title":"Type System","uri":"/typesystem/"},{"categories":null,"content":" productive a request for the first i element of the stream is guaranteed to be processed in finite time means the program is productive I guess head is to read the first element of a stream and tail is the stream excluding the first element so we introduce type: ST^i for streams with at least i elements using sized types we can infer the lower bounds on the size of all the streams if we can claim a function has a type: ST^i -\u003e ST^j \u0026\u0026 i\u003ej then we can prove termination ","date":"2023-02-04","objectID":"/typesystem/:3:1","tags":null,"title":"Type System","uri":"/typesystem/"},{"categories":null,"content":" Primitive Recursion: Reverse sized type system can prove termination or productivity of functions in primitive recursive form reverse :: \\forall i. \\forall t. LIST_i t -\u003e LIST_i t reverse xs = case xs of Nil -\u003e Nil Cons y ys -\u003e append (reverse ys) (Cons y Nil) Nil -\u003e Nil has type LIST_{i+1} t (why i+t though) append (Reverse ys) (Cons y Nil) :: LIST_{i+1} -\u003e t Accumulating Parameters allow a limited form of polymorphic recursion: over sizes, but not types. ","date":"2023-02-04","objectID":"/typesystem/:3:2","tags":null,"title":"Type System","uri":"/typesystem/"},{"categories":null,"content":" Array Bounds Check We view an array as a function from indices to contents an array of t with 6 elements has type NAT_6 -\u003e t ","date":"2023-02-04","objectID":"/typesystem/:3:3","tags":null,"title":"Type System","uri":"/typesystem/"},{"categories":null,"content":" questions I guess Mk and ST are all special keywords and ST is stream. However I still don't get what how to combine a NAT and a ST Sized Type consider the length of the stream instead the value of streams. I think the value of input is also important. For example, the Array Bounds Check problem, a common scenario is the array having a dynamic length (i.e. depends on input), and the length becomes unknown to tpye system. So if we want to constrain the input refinement type sounds more reasonable but it will probably become a SAT problem. Even though I feel memory allocation is still a conflict between efficiency and safety. If you allow dynamically length it is more tricky to prove the safety but you gain some flexibility. Is it possible to combine sized type and refinement type to check more security properties of the program? ","date":"2023-02-04","objectID":"/typesystem/:3:4","tags":null,"title":"Type System","uri":"/typesystem/"},{"categories":null,"content":" typing vs typechecking 顶不住了, 先看看中文文档吧 typing-vs-typechecking ","date":"2023-02-04","objectID":"/typesystem/:4:0","tags":null,"title":"Type System","uri":"/typesystem/"},{"categories":null,"content":" 本体论(Ontology) 类型是一种抽象的实体(entity) 类型不是名称 类型 = 分类？ 不是 不是为了对现有对象\"分类\", 因为被“分类”的对象都是先前毫无意义, 只是通过这个类型才确定的, 而且具有这样类型的值 只可能有一种完全等价的 构造方式, 这就是所谓的 unit type 的实例 类型是什么 对于某个类型系统中的类型——这种人为设计中的一份子 类型系统的设计者或者类型的设计者（类型系统的用户）希望它是什么 历史上的类型是什么 罗素悖论 - 类型论 任给一个性质(例如：\"年满三十岁\"就是一个性质)，满足该性质的所有集合总可以组成一个集合 设有一性质P，并以一性质函数表示：P(x)，且其中的自变量x有此特性： x ∉ x， 不是, x ∉ x 是什么意思 我靠我一直觉得 PL 讲的 type 本质都应该是数学集合, 好像还是有点道理, 然而类型系统好像是集合论的上位(也许)替代 类型的意义 各种类型论中, 并没有要求\"类型\"成为和某种领域外实体的对应, 以作为建模或\"分类\"的基础, 而仅仅是项 (term) 上关联的一些抽象实体 ","date":"2023-02-04","objectID":"/typesystem/:4:1","tags":null,"title":"Type System","uri":"/typesystem/"},{"categories":null,"content":" 派生概念 类型正确(Type Correctness) 符合期望 类型是开发者对数据、对实体属性的描述, 显式类型是开发者对于程序设计的理解和限定的直接描述 原文对可读性和重构的考虑脱离实际 使用 var, auto 借用 Type inference 省去对数据的描述是让开发者在上下文中丢失对数据的理解, 且不便于第三方审阅代码; 在重构时, 考虑代码改动对数据, 对上下文的影响是非常重要且易错的环节, 显式类型要求开发者对语义的改变进行考虑(当然如果开发者匆匆掠过是另一个问题), 类型推断提供了开发便利但不利于保证程序正确性 即使使用 var, auto ，一个不可忽视的事实是, 编译器生成的 binary 并不包含 var 类型, 实际 runtime 类型有且只有一个具体类型(如果有 runtime type), 如果没有 runtime type 那么数据就只是纯粹的数据而不带任何限制, 这与源代码中 var, auto 所表达的类型不匹配, 而开发者因代码和运行时的差异对程序行为做出错误预测是非常不理想的设计缺陷 一个可以接受的选择是type system在编译前就将 auto 替换成具体类型 类型识别(Type Identification) 要判断类型是否相同, 比较给定的表示类型的数据结构（类型标识）和已知类型的对应数据结构是否相等 类型转换(Type Conversion) 强制(coercion) 是一种隐式转换 多态(ad-hoc polymorphism) 而和铸型(casting) 显式转换 类型安全(Type Safety) 较常用的一种安全机制的基本思路是，定义类型是某个域(domain)中值的集合, 保证类型安全需要考察的值是否总是符合其对应类型的约束. 判断对象语言描述的程序是否符合类型安全这项任务能被程序表达和实现(包括语言自身的实现, 如编译时的检查). 这样, 类型安全可以视为某一些语言规则中蕴含的性质 当语言的规则不足以保证它表达的任意操作产生的值属于规则事先指定的值的集合之内, 这些规则就不是安全的 安全一般考虑两个方面, 一个是 confidentiality, 一个是 integrity 未定义行为说成类型不安全其实是符合安全的描述的, 对应 integrity 的 control-flow \u0026 information-flow integrity 类型检查(Typechecking) 现实的类型安全一般通过在语言设计中由两类手段提供支持 语言的构造性规则限制不安全类型构造的表达 – typing 语言对潜在不安全的表达进行额外的语义检查 – type checking (广义地也能包含typing) 尽管一般实现 typechecking 蕴含解一个判定性问题 – 即作用于代码上判断出一个表示 \"通过\" 或\"不通过\"的二元结果, 却并不一定表示接受或者拒绝接受程序 一条语言规则不会因为实现要求附加其它行为或不要求任何可预测的行为 (所谓未定义行为) 而不适合归类为 typechecking 规则; 举例: C 的许多使用非兼容类型 (compatible type) 的值的操作是未定义行为, 这不是 typing, 而指定了作用于指针类型上的 typechecking 静态/动态 类型 静态类型或者动态类型都和 typing 的时机有关; 而单纯静态/动态, 对彻底不提供类型系统设计的 typeless 的语言都可能说得通 强类型 强类型 (strong type/strong typing/strongly typed) manifest typing/latent typing ","date":"2023-02-04","objectID":"/typesystem/:4:2","tags":null,"title":"Type System","uri":"/typesystem/"},{"categories":null,"content":" Dependent typing a dependent type is a type whose definition depends on a value dependent types are used to encode logic's quantifiers like \"for all\" and \"there exists\" Two common examples of dependent types are dependent functions, which correspond to \"for all\" and dependent pairs, which correspond to \"there exists\". The return type of a dependent function may depend on the value (not just type) of one of its arguments. Deciding the equality of dependent types in a program may require computations. If arbitrary values are allowed in dependent types, then deciding type equality may involve deciding whether two arbitrary programs produce the same result the decidability of type checking may depend on the given type theory's semantics of equality, that is, whether the type theory is intensional or extensional. ","date":"2023-02-04","objectID":"/typesystem/:5:0","tags":null,"title":"Type System","uri":"/typesystem/"},{"categories":null,"content":" Formal definition Π type dependent types are similar to the type of an indexed family of sets formally, given a type A: U in a universe of types U, one may have a family of types B: A \\to U, which assigns to each term a: A a type B(a): U. We say that the type B(a) varies with a. A function whose type of return value varies with its argument (i.e. there is no fixed codomain) is a dependent function and the type of this function is called dependent product type, pi-type (Π type) or dependent function type. Written as \\Pi_{(x:A)} B(x) Σ type The dual of the dependent product type is the dependent pair type, dependent sum type, sigma-type If, in the universe of types U, there is a type A: U and a family of types B: A \\to U, then there is a dependent pair type \\sum_{x:A} B(x) The dependent pair type captures the idea of an ordered pair where the type of the second term is dependent on the value of the first. If (a,b):\\sum_{x:A}B(x) then a: A and b: B(a) ","date":"2023-02-04","objectID":"/typesystem/:5:1","tags":null,"title":"Type System","uri":"/typesystem/"},{"categories":null,"content":" Extra reading Extensional and intensional definitions Intensional definition An intensional definition gives meaning to a term by specifying necessary and sufficient conditions for when the term should be used. intensional definitions are best used when something has a clearly defined set of properties, and they work well for terms that have too many referents to list in an extensional definition. Extensional definition An extensional definition gives meaning to a term by specifying its extension, that is, every object that falls under the definition of the term in question. An explicit listing of the extension, which is only possible for finite sets and only practical for relatively small sets, is a type of enumerative definition. Extensional definitions are used when listing examples would give more applicable information than other types of definition, and where listing the members of a set tells the questioner enough about the nature of that set. A fundamental distinction is extensional vs intensional type theory. In extensional type theory, definitional (i.e., computational) equality is not distinguished from propositional equality, which requires proof. As a consequence type checking becomes undecidable in extensional type theory because programs in the theory might not terminate. For example, such a theory allows one to give a type to the Y-combinator; a detailed example of this can be found in Nordstöm and Petersson Programming in Martin-Löf's Type Theory.[2] However, this does not prevent extensional type theory from being a basis for a practical tool; for example, NuPRL is based on extensional type theory. intuitionistic logic In the semantics of classical logic, propositional formulae are assigned truth values from the two-element set \\top, \\bot (\"true\" and \"false\" respectively) This is referred to as the 'law of excluded middle', because it excludes the possibility of any truth value besides 'true' or 'false' Propositional formulae in intuitionistic logic are not assigned a definite truth value and are only considered \"true\" when we have direct evidence, hence proof. if there is a constructive proof that an object exists, that constructive proof may be used as an algorithm for generating an example of that object, a principle known as the Curry–Howard correspondence between proofs and algorithms. the double negation of the law is retained as a tautology of the system: that is, it is a theorem that \\neg(\\neg (P \\vee \\neg P)) regardless of the proposition P In intuitionistic logic, only P \\rightarrow \\neg\\neg P is theorem, \\neg\\neg P \\rightarrow P is not First-order logic First-order logic—also known as predicate logic, quantificational logic, and first-order predicate calculus Predicate logic is an extension of propositional logic, adding quantifiers. Curry–Howard correspondence Curry–Howard correspondence (also known as the Curry–Howard isomorphism or equivalence) is the direct relationship between computer programs and mathematical proofs. A proof is a program, and the formula it proves is the type for the program General formulation Logic side Programming side universal quantification generalised product type (Π type) existential quantification generalised sum type (Σ type) implication function type conjunction product type disjunction sum type true formula unit type or top type false formula empty type or bottom type hypotheses free variables implication elimination (modus ponens) application implication introduction abstraction assumption variable axiom schemes combinators modus ponens application deduction theorem abstraction elimination Hilbert-style deduction systems axiom schemes α → (β → α) K: λ xy.x (α → (β → γ)) → ((α → β) → (α → γ)) S: λ xyz.(x z (y z)) formalization Let Γ be a finite collection of formulas, considered as hypotheses. Then δ is derivable from Γ, denoted Γ ⊢ δ, in the following cases: δ is an hypothesis, i.e. it is a formula of Γ, δ is an instance of an axiom scheme; i.e., under the most","date":"2023-02-04","objectID":"/typesystem/:5:2","tags":null,"title":"Type System","uri":"/typesystem/"},{"categories":null,"content":" From System F to Typed Assembly Language ","date":"2023-02-04","objectID":"/typesystem/:6:0","tags":null,"title":"Type System","uri":"/typesystem/"},{"categories":null,"content":" abstract type-preserving transformation from the System-F to Typed Assembly Language (TAL) admit low-level compiler optimization CPS \u0026 A polymorphic closure conversion phases Get type-correct source program and map it to type-correct ASM Compiler question suitable for use in systems where untrusted and potentially malicious code must be checked for safety before execution. but in untrusted environment usually we could only access binary without source code CPS conversion, closure conversion, unboxing, subsumption elimination, or region inference ","date":"2023-02-04","objectID":"/typesystem/:6:1","tags":null,"title":"Type System","uri":"/typesystem/"},{"categories":null,"content":" introduction some type information are lost admits most conventional low-level optimizations such as global register allocation copy propagation constant folding dead-code elimination. Except for a small number of atomic code patterns. What patterns? support code motion instruction scheduling common-subexpression elimination loop-invariant removal not support run-time code generation intensional polymorphism array bounds check elimination SPIN type-check in Linux kernel ","date":"2023-02-04","objectID":"/typesystem/:6:2","tags":null,"title":"Type System","uri":"/typesystem/"},{"categories":null,"content":" overview TAL type-preserving compiler workflow λ^F -\u003e CPS conversion λ^k -\u003e Closure conversion λ^C -\u003e Hoisting λ^H -\u003e Allocation λ^A -\u003e Code Generation ","date":"2023-02-04","objectID":"/typesystem/:6:3","tags":null,"title":"Type System","uri":"/typesystem/"},{"categories":null,"content":" System-F polymorphic λ-calculus ","date":"2023-02-04","objectID":"/typesystem/:6:4","tags":null,"title":"Type System","uri":"/typesystem/"},{"categories":null,"content":" CPS continuation passnig style – eliminates the need for a control stack all unconditional control transfer: function invocation and return are achieved via function call. ","date":"2023-02-04","objectID":"/typesystem/:6:5","tags":null,"title":"Type System","uri":"/typesystem/"},{"categories":null,"content":" λ^K λ^K consists of a series of let bindings followed by a function call only one abstraction for both type and value variables halt? functions do not return values but it just jumps expression never return values ∆; Γ ⊢_K e indicates that the term e is well formed Translation K_exp 〚 e 〛 takes a continuation k, computes the value of e and hands that value to k variable capture? can all STLC be transformed into CPS? a realistic CPS-converter would eliminate \"administrative\" redices and optimize tail recursion ","date":"2023-02-04","objectID":"/typesystem/:6:6","tags":null,"title":"Type System","uri":"/typesystem/"},{"categories":null,"content":" Simplified polymorphic closure conversion Making closure explicit and therby separating program code from data rewrite functions so that there is no free varaibles. how? function calls are performed by calling code with the environment as an addtional argument hoisting: lift the code blocks to the top of the program adopt the type-erasure interpretation of polymorphism which substitude the free type variables directly into code blocks Translation C〚·〛: β represent the type of the value environment for the closure Hoisting fix is no longer a value form. code blocks are defined by letrec prefix letrec and mutually recursive and CPS? ","date":"2023-02-04","objectID":"/typesystem/:6:7","tags":null,"title":"Type System","uri":"/typesystem/"},{"categories":null,"content":" Explicit allocation eliminate the value form for tuples introduce new declaration forms for allocating and initializing tuples n-element tuple can be separated into an allocation and n initialization Translation memory layout of nested structure? ","date":"2023-02-04","objectID":"/typesystem/:6:8","tags":null,"title":"Type System","uri":"/typesystem/"},{"categories":null,"content":" Typed Assembly language simultaneously abstract a type environment a set of type arguments a set of value arguments assume an infinite supply of registers if it is finite, spilling registers into a tuple and reloading values from this tuple distinguishable labels and registers TAL syntax TAL machine state: heap register file instructions TAL Operational Semantics a type-erasure interpretation does not erase the type from the semantics TAL Static Semantics specify when programs are well formed and ensure the program will not get stuck formation judgments are for heaps + register file + instructions Code generation For translation of function types, registers are assigned to value arguments x = v ⇒ mov r_x, v x = v_1 P v_2 ⇒ mov r_x, v1; arith r_x, r_x, v_2 if0(v, e_1, e_2) ⇒ mov r_tmp, v; bnz r_tmp, ℓ[α]; I_1 … ","date":"2023-02-04","objectID":"/typesystem/:6:9","tags":null,"title":"Type System","uri":"/typesystem/"},{"categories":null,"content":" Optimization how to reason the soundness of optimization? measure the equivalence? imaging a code snippet as a block-box B. after some optimization, we can get a block-box B' which generates exactly some output as B for arbitrary input but require less latency. that sounds so weird how could know what attributes are lost or kept during the optimization? ","date":"2023-02-04","objectID":"/typesystem/:6:10","tags":null,"title":"Type System","uri":"/typesystem/"},{"categories":null,"content":" KVM ","date":"2023-02-04","objectID":"/virtualmachine/:1:0","tags":null,"title":"VirtualMachine","uri":"/virtualmachine/"},{"categories":null,"content":" bridge NOTE: start dhcpcd.service nmcli connection add type bridge ifname br0 stp no nmcli connection add type bridge-slave ifname enp7s0 master br0 nmcli connection show --active nmcli connection down bridge-br0 nmcli connection down Wired\\ connection\\ 1 nmcli connection show nmcli connection up bridge-br0 nmcli connection up bridge-slave-enp7s0 ","date":"2023-02-04","objectID":"/virtualmachine/:1:1","tags":null,"title":"VirtualMachine","uri":"/virtualmachine/"},{"categories":null,"content":" kernel compilation make -j24 \u0026\u0026 \\ sudo make -j24 modules_install headers_install install \u0026\u0026 \\ sudo cp arch/x86_64/boot/bzImage /boot/vmlinuz-6.0-ebpf-x86_64 \u0026\u0026 \\ sudo mkinitcpio -p linux60-ebpf \u0026\u0026 \\ sudo update-grub Cannot find LILO manually update boot loader sudo pacman -S grub install sudo make -j24 modules_install headers_install install mkinitcpio sudo mkinitcpio -p linux60 # /etc/mkinitcpio.d/linux60.preset # mkinitcpio preset file for the '6.0-x86_64' package ALL_config=\"/etc/mkinitcpio.conf\" ALL_kver=\"/boot/vmlinuz-6.0-x86_64\" PRESETS=('default' 'fallback') #default_config=\"/etc/mkinitcpio.conf\" default_image=\"/boot/initramfs-6.0-x86_64.img\" #default_options=\"\" #fallback_config=\"/etc/mkinitcpio.conf\" fallback_image=\"/boot/initramfs-6.0-x86_64-fallback.img\" fallback_options=\"-S autodetect\" ","date":"2023-02-04","objectID":"/virtualmachine/:1:2","tags":null,"title":"VirtualMachine","uri":"/virtualmachine/"},{"categories":null,"content":" serial console change the grub config # /etc/default/grub GRUB_TERMINAL=\"serial console\" GRUB_CMDLINE_LINUX_DEFAULT=\"console=ttyS0,115200n8\" GRUB_SERIAL_COMMAND=\"serial --speed=115200 --unit=0 --word=8 --parity=no --stop=1\" systemctl enable serial-getty@ttyS0.service systemctl start serial-getty@ttyS0.service ","date":"2023-02-04","objectID":"/virtualmachine/:1:3","tags":null,"title":"VirtualMachine","uri":"/virtualmachine/"},{"categories":null,"content":" gdb kernel config Build the kernel with CONFIG_GDB_SCRIPTS enabled, but leave CONFIG_DEBUG_INFO_REDUCED off. Turn off KASLR if necessary by adding “nokaslr” to the kernel command line. If your architecture supports CONFIG_FRAME_POINTER, Enable FRAME_POINTER!!! QEMU/KVM Add qemu commandline -s stands for -gdb \u0026 tcp:1234 \u003cdomain type='kvm' xmlns:qemu='http://libvirt.org/schemas/domain/qemu/1.0'\u003e \u003cqemu:commandline\u003e \u003cqemu:arg value='-s'/\u003e \u003c/qemu:commandline\u003e \u003c!-- or --\u003e \u003cqemu:commandline\u003e \u003cqemu:arg value=\"-gdb\"/\u003e \u003cqemu:arg value=\"tcp::1235\"/\u003e \u003c/qemu:commandline\u003e \u003c/domain\u003e Attach Copy vmlinux from Linux kernel root directory first gdb ./vmlinux target remote :1234 lx-symbols Edit ~/.config/gdb/gdbinit add-auto-load-safe-path /PATH/linux/scripts/gdb/vmlinux-gdb.py ","date":"2023-02-04","objectID":"/virtualmachine/:1:4","tags":null,"title":"VirtualMachine","uri":"/virtualmachine/"},{"categories":null,"content":" Image qemu qcow2 virtual box vmdk vmware vmdk unzip OVA → tar -xf ova-file.ova qemu-img convert -O qcow2 vmdk-file.vmdk qcow2-file.qcow2 ","date":"2023-02-04","objectID":"/virtualmachine/:1:5","tags":null,"title":"VirtualMachine","uri":"/virtualmachine/"},{"categories":null,"content":" boot from disk qemu-system-x86_64 -drive format=qcow2,file=fact.qcow2 ","date":"2023-02-04","objectID":"/virtualmachine/:1:6","tags":null,"title":"VirtualMachine","uri":"/virtualmachine/"},{"categories":["linux"],"content":" Configuration Save history set history save on ","date":"2023-01-26","objectID":"/gdb/:1:0","tags":["GDB","cheatsheet"],"title":"GDB Cheat Sheet","uri":"/gdb/"},{"categories":["linux"],"content":" Layout ","date":"2023-01-26","objectID":"/gdb/:2:0","tags":["GDB","cheatsheet"],"title":"GDB Cheat Sheet","uri":"/gdb/"},{"categories":["linux"],"content":" Kernel Debugging (gdb) apropos lx function lx_current -- Return current task function lx_module -- Find module by name and return the module variable function lx_per_cpu -- Return per-cpu variable function lx_task_by_pid -- Find Linux task by PID and return the task_struct variable function lx_thread_info -- Calculate Linux thread_info from task variable lx-dmesg -- Print Linux kernel log buffer lx-lsmod -- List currently loaded modules lx-symbols -- (Re-)load symbols of Linux kernel and currently loaded modules ","date":"2023-01-26","objectID":"/gdb/:3:0","tags":["GDB","cheatsheet"],"title":"GDB Cheat Sheet","uri":"/gdb/"},{"categories":["JIT"],"content":" JIT definition The just-in-time (JIT) compilation generates and execute bytecode at runtime rather than before execution. ","date":"2023-01-13","objectID":"/jit/:1:0","tags":["JIT"],"title":"JIT","uri":"/jit/"},{"categories":["JIT"],"content":" JIT design In a bytecode-compiled system, source code is translated to an intermediate representation known as bytecode. The bytecode may then be interpreted by, or run on a virtual machine. The JIT compiler compiles the bytecodes dynamically into machine code so the program can run faster. The code can be compiled when it is about to be executed (hence the name \"just-in-time\"), and then cached and reused later without needing to be recompiled. ","date":"2023-01-13","objectID":"/jit/:2:0","tags":["JIT"],"title":"JIT","uri":"/jit/"},{"categories":["JIT"],"content":" Java The JIT compiler helps improve the performance of Java programs by compiling bytecodes into native machine code at run time. Can the JIT compiler decompile methods? Typically, the JIT compiler does not decompile methods. However, in rare instances the JIT compiler is forced to decompile a method. Such instances arise when the JIT compiler applies speculative optimizations based on compile-time assumptions, the assumptions are later violated, and the JIT compiler is then unable to recompile the method. Due to implementation restrictions, such methods remain interpreted until the end of the application. ","date":"2023-01-13","objectID":"/jit/:2:1","tags":["JIT"],"title":"JIT","uri":"/jit/"},{"categories":["JIT"],"content":" JIT Optimization(Java) ","date":"2023-01-13","objectID":"/jit/:3:0","tags":["JIT"],"title":"JIT","uri":"/jit/"},{"categories":["JIT"],"content":" Phase 1 - inlining Inlining is the process by which the trees of smaller methods are merged, or \"inlined\", into the trees of their callers. Trivial inlining Call graph inlining Tail recursion elimination Virtual call guard optimizations ","date":"2023-01-13","objectID":"/jit/:3:1","tags":["JIT"],"title":"JIT","uri":"/jit/"},{"categories":["JIT"],"content":" Phase 2 - local optimizations ","date":"2023-01-13","objectID":"/jit/:3:2","tags":["JIT"],"title":"JIT","uri":"/jit/"},{"categories":["linux"],"content":" shell ","date":"2022-07-24","objectID":"/linux/:1:0","tags":["linux","cheatsheet"],"title":"Linux Cheat Sheet","uri":"/linux/"},{"categories":["linux"],"content":" for loop for it in $array; do done ","date":"2022-07-24","objectID":"/linux/:1:1","tags":["linux","cheatsheet"],"title":"Linux Cheat Sheet","uri":"/linux/"},{"categories":["linux"],"content":" time date \"+%F %H:%M:%S.%N\" # 2023-01-25 23:55:00.152982295 ","date":"2022-07-24","objectID":"/linux/:1:2","tags":["linux","cheatsheet"],"title":"Linux Cheat Sheet","uri":"/linux/"},{"categories":["linux"],"content":" copy to clipboard echo \"copy\" | xclip -set clip ","date":"2022-07-24","objectID":"/linux/:1:3","tags":["linux","cheatsheet"],"title":"Linux Cheat Sheet","uri":"/linux/"},{"categories":["linux"],"content":" sort options -k [n, m] 选择区间 -t g分隔符 -M 排序月份 -n 以数值型进行排序 -h 可读的数字(带单位) -f 忽略大小写 example ","date":"2022-07-24","objectID":"/linux/:1:4","tags":["linux","cheatsheet"],"title":"Linux Cheat Sheet","uri":"/linux/"},{"categories":["linux"],"content":" sed replace sed -E -i 's/SEARCH_REGEX/REPLACEMENT/g' INPUTFILE sed -E -i 's/Xft.dpi: [0-9]+/Xtf.dpi 144/g' ~/.Xresources -i - Edit a file and don't write the output to stdout. s - The substitute command. /// - Delimiter character. It can be any character but usually the slash (/) character is used. g - Global replacement flag. All occurrences are replaced if g provided. ","date":"2022-07-24","objectID":"/linux/:1:5","tags":["linux","cheatsheet"],"title":"Linux Cheat Sheet","uri":"/linux/"},{"categories":["linux"],"content":" awk NOTE use '' instead of \"\" ! pactl get-sink-volume 0 | head -n1 | awk '{print $5}' | sed \"s/%//g\" echo 'this is a test' | awk '{print $3}' ","date":"2022-07-24","objectID":"/linux/:1:6","tags":["linux","cheatsheet"],"title":"Linux Cheat Sheet","uri":"/linux/"},{"categories":["linux"],"content":" tmux config unbind C-b set-option -g prefix M-Space bind-key M-Space send-prefix set -g default-terminal screen-256color set-option -ga terminal-overrides \",*256col*:Tc\" options start tmux new -s *SESSION_NAME* attach tmux a -t *SESSION_NAME* detach send-prefix d create window send-prefix c ","date":"2022-07-24","objectID":"/linux/:1:7","tags":["linux","cheatsheet"],"title":"Linux Cheat Sheet","uri":"/linux/"},{"categories":["linux"],"content":" jobs list background process jobs ","date":"2022-07-24","objectID":"/linux/:1:8","tags":["linux","cheatsheet"],"title":"Linux Cheat Sheet","uri":"/linux/"},{"categories":["linux"],"content":" environment ","date":"2022-07-24","objectID":"/linux/:1:9","tags":["linux","cheatsheet"],"title":"Linux Cheat Sheet","uri":"/linux/"},{"categories":["linux"],"content":" condition 中括号 单中括号 [ ] 两个符号左右都要有空格分隔 内部操作符与操作变量之间要有空格：如 [ \"a\" = \"b\" ] 字符串比较中，\u003e \u003c 需要写成\u003e \\\u003c 进行转义 中字符串或者${}变量尽量使用\"\"双引号扩住，以避免值未定义引用而出错 中可以使用 –a –o 进行逻辑运算 是 shell 内置命令 双中括号 [[ ]] 两个符号左右都要有空格分隔 [[ ]] 内部操作符与操作变量之间要有空格：如 [[ \"a\" = \"b\" ]] [[ ]] 字符串比较中，可以直接使用 \u003e \u003c 无需转义 [[ ]] 中字符串或者${}变量尽量使用\"\" 双引号扩住，如未使用\"\"会进行模式和元字符匹配 [[ ]] 内部可以使用 \u0026\u0026 || 进行逻辑运算 [[ ]] 是 bash keyword example equal if [[ $randm == 1 ]] ; then echo $random == 1 fi not equal if [[ $randm != 1 ]] ; then echo $random != 1 fi exist environment variable check if a environment variable is set if [[ -z ${env} ]]; then fi command check if a command exists if ! command -v python \u0026\u003e /dev/null fi 文件夹或文件 文件夹 if [ ! -d \"folder\" ] ; then fi 文件 if [ ! -f \"file\" ] ; then fi ","date":"2022-07-24","objectID":"/linux/:1:10","tags":["linux","cheatsheet"],"title":"Linux Cheat Sheet","uri":"/linux/"},{"categories":["linux"],"content":" find files find ./fuzz-results/crashes -type f -name \"id:$1*\" -print0 | while read -d $'\\0' file do echo $file done ","date":"2022-07-24","objectID":"/linux/:1:11","tags":["linux","cheatsheet"],"title":"Linux Cheat Sheet","uri":"/linux/"},{"categories":["linux"],"content":" xargs 多行转单行输入, 默认分隔符为换行 pacman -Q | grep -i \"haskell\" | xargs sudo pacman -S --noconfirm placeholder xargs -I {} mv dir1/{} dir2/{} xargs -I '{}' mv dir1/'{}' dir2/'{}' ","date":"2022-07-24","objectID":"/linux/:1:12","tags":["linux","cheatsheet"],"title":"Linux Cheat Sheet","uri":"/linux/"},{"categories":["linux"],"content":" stream symbol meanings 0 stdin 1 stdout 2 stderr 2\u003e\u00261 stderr to stdout 1\u003e stdout redirect 2\u003e stderr redirect 1\u003e/dev/null write to void ","date":"2022-07-24","objectID":"/linux/:1:13","tags":["linux","cheatsheet"],"title":"Linux Cheat Sheet","uri":"/linux/"},{"categories":["linux"],"content":" uniq 仅输出 unique 行 uniq -u ","date":"2022-07-24","objectID":"/linux/:1:14","tags":["linux","cheatsheet"],"title":"Linux Cheat Sheet","uri":"/linux/"},{"categories":["linux"],"content":" grep \u0026 rg grep ","date":"2022-07-24","objectID":"/linux/:1:15","tags":["linux","cheatsheet"],"title":"Linux Cheat Sheet","uri":"/linux/"},{"categories":["linux"],"content":" zip zip -q 不显示命令 -r 递归 -y 不解析 symbol link zip -qry zip_file.zip file1 file2 dir1 -d unzip jacoco-0.8.7.zip -d jacoco tar 解压 tar -xzvf sample.tar.gz -C ./sample 压缩 tar -czf sample.tar.gz ./sample ","date":"2022-07-24","objectID":"/linux/:1:16","tags":["linux","cheatsheet"],"title":"Linux Cheat Sheet","uri":"/linux/"},{"categories":["linux"],"content":" kernel ","date":"2022-07-24","objectID":"/linux/:2:0","tags":["linux","cheatsheet"],"title":"Linux Cheat Sheet","uri":"/linux/"},{"categories":["linux"],"content":" dependencies sudo apt-get install libncurses-dev gawk flex bison openssl libssl-dev dkms libelf-dev libudev-dev libpci-dev libiberty-dev autoconf llvm ","date":"2022-07-24","objectID":"/linux/:2:1","tags":["linux","cheatsheet"],"title":"Linux Cheat Sheet","uri":"/linux/"},{"categories":["linux"],"content":" network ","date":"2022-07-24","objectID":"/linux/:3:0","tags":["linux","cheatsheet"],"title":"Linux Cheat Sheet","uri":"/linux/"},{"categories":["linux"],"content":" iw 格式 iw [ OPTIONS ] { help [ command ] | OBJECT COMMAND } OBJECT := { dev | phy | reg } OPTIONS := { --version | --debug } 搜索 iw dev \u003cdevname\u003e scan 显示设备 iw dev 显示设备信息 iw dev \u003cdevename\u003e info 显示连接信息 iw dev \u003cdevname\u003e link 连接 iw dev \u003cdevname\u003e connect [-w] \u003cSSID\u003e [\u003cfreq in MHz\u003e] [\u003cbssid\u003e] [key 0:abcde d:1:6162636465] [mfp:req/opt/no] # Join the network with the given SSID (and frequency, BSSID). ","date":"2022-07-24","objectID":"/linux/:3:1","tags":["linux","cheatsheet"],"title":"Linux Cheat Sheet","uri":"/linux/"},{"categories":["linux"],"content":" Network Manager 扫描 nmcli device wifi rescan 显示 nmcli device wifi list 连接 nmcli device wifi connect \u003cSSID\u003e password \u003cpassword\u003e [hidden yes] ","date":"2022-07-24","objectID":"/linux/:3:2","tags":["linux","cheatsheet"],"title":"Linux Cheat Sheet","uri":"/linux/"},{"categories":["linux"],"content":" High DPI ","date":"2022-07-24","objectID":"/linux/:4:0","tags":["linux","cheatsheet"],"title":"Linux Cheat Sheet","uri":"/linux/"},{"categories":["linux"],"content":" Netease Music #/opt/netease/netease-cloud-music/netease-cloud-music.bash export QT_SCALE_FACTOR=2 ","date":"2022-07-24","objectID":"/linux/:4:1","tags":["linux","cheatsheet"],"title":"Linux Cheat Sheet","uri":"/linux/"},{"categories":["linux"],"content":" ghidra #/opt/ghidra/support/launch.properties VMARGS_LINUX=-Dsun.java2d.uiScale=2 ","date":"2022-07-24","objectID":"/linux/:4:2","tags":["linux","cheatsheet"],"title":"Linux Cheat Sheet","uri":"/linux/"},{"categories":["linux"],"content":" Wechat #/opt/apps/com.qq.weixin.deepin/files/run.sh export DEEPIN_WINE_SCALE=2.00 ","date":"2022-07-24","objectID":"/linux/:4:3","tags":["linux","cheatsheet"],"title":"Linux Cheat Sheet","uri":"/linux/"},{"categories":["linux"],"content":" user management ","date":"2022-07-24","objectID":"/linux/:5:0","tags":["linux","cheatsheet"],"title":"Linux Cheat Sheet","uri":"/linux/"},{"categories":["linux"],"content":" add user 连接到服务器 ssh root@10.105.250.92 创建用户 adduser example 添加 sudo adduser example sudo ","date":"2022-07-24","objectID":"/linux/:5:1","tags":["linux","cheatsheet"],"title":"Linux Cheat Sheet","uri":"/linux/"},{"categories":["linux"],"content":" ssh pem 生成密钥 sudo su example cd ~/.ssh ssh-keygen -t ed25519 -C \"example@mail.com\" 修改权限 cp ed25519.pub authorized_keys chmod 600 authorized_keys chmod 700 ~/.ssh 拷贝密钥 scp root@10.105.250.92:/home/example/.ssh/ed25519 ~/.ssh/ ","date":"2022-07-24","objectID":"/linux/:5:2","tags":["linux","cheatsheet"],"title":"Linux Cheat Sheet","uri":"/linux/"},{"categories":["linux"],"content":" ssh ","date":"2022-07-24","objectID":"/linux/:6:0","tags":["linux","cheatsheet"],"title":"Linux Cheat Sheet","uri":"/linux/"},{"categories":["linux"],"content":" sshd Match User yayu X11Forwarding yes X11UseLocalhost no AllowTcpForwarding yes ","date":"2022-07-24","objectID":"/linux/:6:1","tags":["linux","cheatsheet"],"title":"Linux Cheat Sheet","uri":"/linux/"},{"categories":["linux"],"content":" ssh Host github.com HostName github.com User git IdentityFile ~/.ssh/yayu ","date":"2022-07-24","objectID":"/linux/:6:2","tags":["linux","cheatsheet"],"title":"Linux Cheat Sheet","uri":"/linux/"},{"categories":["linux"],"content":" Archlinux ","date":"2022-07-24","objectID":"/linux/:7:0","tags":["linux","cheatsheet"],"title":"Linux Cheat Sheet","uri":"/linux/"},{"categories":["linux"],"content":" pacman refresh pgp sudo pacman-key --refresh-keys auto remove sudo pacman -R $(pacman -Qdtq) ","date":"2022-07-24","objectID":"/linux/:7:1","tags":["linux","cheatsheet"],"title":"Linux Cheat Sheet","uri":"/linux/"},{"categories":["linux"],"content":" yay option description -S install -Ss search the package –mflags –skipinteg skip validaty check -R remove -Rs Remove dependencies not required by other packages –overwrite \u003cglob\u003e Bypass file conflict checks and overwrite conflicting files –editmenu edit pkgbuild before install ","date":"2022-07-24","objectID":"/linux/:7:2","tags":["linux","cheatsheet"],"title":"Linux Cheat Sheet","uri":"/linux/"},{"categories":["linux"],"content":" Bluetooth ","date":"2022-07-24","objectID":"/linux/:8:0","tags":["linux","cheatsheet"],"title":"Linux Cheat Sheet","uri":"/linux/"},{"categories":["linux"],"content":" pair $ bluetoothctl # power on # default-agent # scan on [NEW] Device 00:12:34:56:78:90 Air Pods # pair 00:12:34:56:78:90 # connect 00:12:34:56:78:90 ","date":"2022-07-24","objectID":"/linux/:8:1","tags":["linux","cheatsheet"],"title":"Linux Cheat Sheet","uri":"/linux/"},{"categories":["linux"],"content":" airpods # /etc/bluetooth/main.conf ControllerMode = bredr ","date":"2022-07-24","objectID":"/linux/:8:2","tags":["linux","cheatsheet"],"title":"Linux Cheat Sheet","uri":"/linux/"},{"categories":["linux"],"content":" module ","date":"2022-07-24","objectID":"/linux/:9:0","tags":["linux","cheatsheet"],"title":"Linux Cheat Sheet","uri":"/linux/"},{"categories":["linux"],"content":" install/load modprobe \u003cmodule\u003e ","date":"2022-07-24","objectID":"/linux/:9:1","tags":["linux","cheatsheet"],"title":"Linux Cheat Sheet","uri":"/linux/"},{"categories":["linux"],"content":" remove rmmod \u003cmodule\u003e ","date":"2022-07-24","objectID":"/linux/:9:2","tags":["linux","cheatsheet"],"title":"Linux Cheat Sheet","uri":"/linux/"},{"categories":["linux"],"content":" nouveau ","date":"2022-07-24","objectID":"/linux/:10:0","tags":["linux","cheatsheet"],"title":"Linux Cheat Sheet","uri":"/linux/"},{"categories":["linux"],"content":" blacklist # /etc/modprobe.d/nvidia.conf blacklist nouveau ","date":"2022-07-24","objectID":"/linux/:10:1","tags":["linux","cheatsheet"],"title":"Linux Cheat Sheet","uri":"/linux/"},{"categories":["linux"],"content":" Remove kms from the HOOKS array in /etc/mkinitcpio.conf ","date":"2022-07-24","objectID":"/linux/:10:2","tags":["linux","cheatsheet"],"title":"Linux Cheat Sheet","uri":"/linux/"},{"categories":["linux"],"content":" regenerate the initramfs mkinitcpio -p linux ","date":"2022-07-24","objectID":"/linux/:10:3","tags":["linux","cheatsheet"],"title":"Linux Cheat Sheet","uri":"/linux/"},{"categories":["linux"],"content":" keyboard layout ","date":"2022-07-24","objectID":"/linux/:11:0","tags":["linux","cheatsheet"],"title":"Linux Cheat Sheet","uri":"/linux/"},{"categories":["linux"],"content":" xmodmap caps_lock -\u003e control # ~/.Xmodmap clear lock clear control keycode 66 = Control_L add control = Control_L Control_R setxkbmap -option caps:ctrl_modifier setxkbmap -option caps:ctrl_modifier ","date":"2022-07-24","objectID":"/linux/:11:1","tags":["linux","cheatsheet"],"title":"Linux Cheat Sheet","uri":"/linux/"},{"categories":["tool"],"content":" Dockerfile ","date":"2022-05-21","objectID":"/docker/:1:0","tags":["docker"],"title":"Docker","uri":"/docker/"},{"categories":["tool"],"content":" Docker command ","date":"2022-05-21","objectID":"/docker/:2:0","tags":["docker"],"title":"Docker","uri":"/docker/"},{"categories":["tool"],"content":" run docker run [OPTIONS] IMAGE [COMMAND] [ARG...] # example docker run -it --name sample_docker ubuntu:20.04 /bin/bash description 创建和启动一个新的容器实例 create and start a new container instance options Option Description –name Name -i Keep STDIN open even if not attached -t Allocate a pseudo-TTY ","date":"2022-05-21","objectID":"/docker/:2:1","tags":["docker"],"title":"Docker","uri":"/docker/"},{"categories":["tool"],"content":" exec description 已运行的容器中, 执行命令 options Option Description -i interaction -t terminal -w workspace ","date":"2022-05-21","objectID":"/docker/:2:2","tags":["docker"],"title":"Docker","uri":"/docker/"},{"categories":["tool"],"content":" start docker attach docker_name/docker_id [-i] -i interact ","date":"2022-05-21","objectID":"/docker/:2:3","tags":["docker"],"title":"Docker","uri":"/docker/"},{"categories":["tool"],"content":" volume docker run -v /local_path:/docker_path -it --name sample_docker ubuntu:20.04 /bin/bash ","date":"2022-05-21","objectID":"/docker/:2:4","tags":["docker"],"title":"Docker","uri":"/docker/"},{"categories":["tool"],"content":" attach docker attach [docker_name/docker_id] ","date":"2022-05-21","objectID":"/docker/:2:5","tags":["docker"],"title":"Docker","uri":"/docker/"},{"categories":["program_languages"],"content":" clang-format # 语言: None, Cpp, Java, JavaScript, ObjC, Proto, TableGen, TextProto Language: Cpp # BasedOnStyle BasedOnStyle: LLVM # 访问说明符(public、private等)的偏移 AccessModifierOffset: -4 # 开括号(开圆括号、开尖括号、开方括号)后的对齐: Align, DontAlign, AlwaysBreak(总是在开括号后换行) AlignAfterOpenBracket: Align # 连续赋值时，对齐所有等号 AlignConsecutiveAssignments: true # 连续声明时，对齐所有声明的变量名 AlignConsecutiveDeclarations: true # 左对齐逃脱换行(使用反斜杠换行)的反斜杠 AlignEscapedNewlinesLeft: true # 水平对齐二元和三元表达式的操作数 AlignOperands: true # 对齐连续的尾随的注释 AlignTrailingComments: true # 允许函数声明的所有参数在放在下一行 AllowAllParametersOfDeclarationOnNextLine: true # 允许短的块放在同一行 AllowShortBlocksOnASingleLine: false # 允许短的case标签放在同一行 AllowShortCaseLabelsOnASingleLine: false # 允许短的函数放在同一行: None, InlineOnly(定义在类中), Empty(空函数), Inline(定义在类中，空函数), All AllowShortFunctionsOnASingleLine: Empty # 允许短的if语句保持在同一行 AllowShortIfStatementsOnASingleLine: false # 允许短的循环保持在同一行 AllowShortLoopsOnASingleLine: false # 总是在定义返回类型后换行(deprecated) AlwaysBreakAfterDefinitionReturnType: None # 总是在返回类型后换行: None, All, TopLevel(顶级函数，不包括在类中的函数), # AllDefinitions(所有的定义，不包括声明), TopLevelDefinitions(所有的顶级函数的定义) AlwaysBreakAfterReturnType: None # 总是在多行string字面量前换行 AlwaysBreakBeforeMultilineStrings: false # 总是在template声明后换行 AlwaysBreakTemplateDeclarations: false # false表示函数实参要么都在同一行，要么都各自一行 BinPackArguments: true # false表示所有形参要么都在同一行，要么都各自一行 BinPackParameters: true # 大括号换行，只有当BreakBeforeBraces设置为Custom时才有效 BraceWrapping: # class定义后面 AfterClass: false # 控制语句后面 AfterControlStatement: false # enum定义后面 AfterEnum: false # 函数定义后面 AfterFunction: false # 命名空间定义后面 AfterNamespace: false # ObjC定义后面 AfterObjCDeclaration: false # struct定义后面 AfterStruct: false # union定义后面 AfterUnion: false # catch之前 BeforeCatch: true # else之前 BeforeElse: true # 缩进大括号 IndentBraces: false # 在二元运算符前换行: None(在操作符后换行), NonAssignment(在非赋值的操作符前换行), All(在操作符前换行) BreakBeforeBinaryOperators: NonAssignment # 在大括号前换行: Attach(始终将大括号附加到周围的上下文), Linux(除函数、命名空间和类定义，与Attach类似), # Mozilla(除枚举、函数、记录定义，与Attach类似), Stroustrup(除函数定义、catch、else，与Attach类似), # Allman(总是在大括号前换行), GNU(总是在大括号前换行，并对于控制语句的大括号增加额外的缩进), WebKit(在函数前换行), Custom 如果不换行岂不是一直出屏幕外了？ # 注：这里认为语句块也属于函数 BreakBeforeBraces: Custom # 在三元运算符前换行 BreakBeforeTernaryOperators: true # 在构造函数的初始化列表的逗号前换行 BreakConstructorInitializersBeforeComma: false # 每行字符的限制, 0表示没有限制 ColumnLimit: 80 # 描述具有特殊意义的注释的正则表达式, 它不应该被分割为多行或以其它方式改变 CommentPragmas: '^ IWYU pragma:' # 构造函数的初始化列表要么都在同一行, 要么都各自一行 ConstructorInitializerAllOnOneLineOrOnePerLine: true # 构造函数的初始化列表的缩进宽度 ConstructorInitializerIndentWidth: 4 # 延续的行的缩进宽度 ContinuationIndentWidth: 4 # 去除C++11的列表初始化的大括号{后和}前的空格 Cpp11BracedListStyle: false # 继承最常用的指针和引用的对齐方式 DerivePointerAlignment: false # 关闭格式化 DisableFormat: false # 自动检测函数的调用和定义是否被格式为每行一个参数(Experimental) ExperimentalAutoDetectBinPacking: false # 需要被解读为foreach循环而不是函数调用的宏 ForEachMacros: [ foreach, Q_FOREACH, BOOST_FOREACH ] # 对 #include进行排序, 匹配了某正则表达式的 #include拥有对应的优先级, 匹配不到的则默认优先级为INT_MAX(优先级越小排序越靠前), # 可以定义负数优先级从而保证某些 #include永远在最前面 IncludeCategories: - Regex: '^\"(llvm|llvm-c|clang|clang-c)/' Priority: 2 - Regex: '^(\u003c|\"(gtest|isl|json)/)' Priority: 3 - Regex: '.*' Priority: 1 # 缩进case标签 IndentCaseLabels: false # 缩进宽度 IndentWidth: 4 # 函数返回类型换行时, 缩进函数声明或函数定义的函数名 IndentWrappedFunctionNames: false # 保留在块开始处的空行 KeepEmptyLinesAtTheStartOfBlocks: true # 开始一个块的宏的正则表达式 MacroBlockBegin: '' # 结束一个块的宏的正则表达式 MacroBlockEnd: '' # 连续空行的最大数量 MaxEmptyLinesToKeep: 2 # 命名空间的缩进: None, Inner(缩进嵌套的命名空间中的内容), All NamespaceIndentation: Inner # 使用ObjC块时缩进宽度 ObjCBlockIndentWidth: 4 # 在ObjC的@property后添加一个空格 ObjCSpaceAfterProperty: false # 在ObjC的protocol列表前添加一个空格 ObjCSpaceBeforeProtocolList: true # 在call(后对函数调用换行的penalty PenaltyBreakBeforeFirstCallParameter: 19 # 在一个注释中引入换行的penalty PenaltyBreakComment: 300 # 第一次在 \u003c\u003c 前换行的penalty PenaltyBreakFirstLessLess: 120 # 在一个字符串字面量中引入换行的penalty PenaltyBreakString: 1000 # 对于每个在行字符数限制之外的字符的penalty PenaltyExcessCharacter: 1000000 # 将函数的返回类型放到它自己的行的penalty PenaltyReturnTypeOnItsOwnLine: 60 # 指针和引用的对齐: Left, Right, Middle PointerAlignment: Left # 允许重新排","date":"2022-04-20","objectID":"/cc/:1:0","tags":["c","cpp"],"title":"C - Cpp","uri":"/cc/"},{"categories":["program_languages"],"content":" typedef ","date":"2022-04-20","objectID":"/cc/:2:0","tags":["c","cpp"],"title":"C - Cpp","uri":"/cc/"},{"categories":["program_languages"],"content":" syntax typedef \u003cexisting_data_type\u003e \u003cnew_data_type_name\u003e; ","date":"2022-04-20","objectID":"/cc/:2:1","tags":["c","cpp"],"title":"C - Cpp","uri":"/cc/"},{"categories":["program_languages"],"content":" sample array typedef int sixteen_int_array[16]; // type \\Rightarrow int(*)[16]; sixteen_int_array arr; // equal uint32_t (*arr)[16]; arr = calloc(16, sizeof(uint32_t)); struct typedef struct sample_struct { int a; char b; } struct_t; function pointer return type: int, arguments: (int, char) typedef int (*func_ptr_t)(int, char); ","date":"2022-04-20","objectID":"/cc/:2:2","tags":["c","cpp"],"title":"C - Cpp","uri":"/cc/"},{"categories":["program_languages"],"content":" memory ","date":"2022-04-20","objectID":"/cc/:3:0","tags":["c","cpp"],"title":"C - Cpp","uri":"/cc/"},{"categories":["program_languages"],"content":" calloc alocated with 0 void* calloc(size_t num, size_t size); int* arr; arr = (int*)calloc(16, sizeof(int)); // a[16] = {0} ","date":"2022-04-20","objectID":"/cc/:3:1","tags":["c","cpp"],"title":"C - Cpp","uri":"/cc/"},{"categories":["program_languages"],"content":" file ","date":"2022-04-20","objectID":"/cc/:4:0","tags":["c","cpp"],"title":"C - Cpp","uri":"/cc/"},{"categories":["program_languages"],"content":" FILE write char* filename = \"file.txt\"; FILE* fp; // Open the file for writing in binary mode fp = fopen(filename, \"wb\"); if (fp == NULL) { fprintf(stderr, \"Error opening file %s\\n\", filename); exit(1); } char buffer[128] = {}; sprintf(buffer, \"write to file: %s\", filename); fwrite(buffer, sizeof(char), strlen(buffer), fp); ","date":"2022-04-20","objectID":"/cc/:4:1","tags":["c","cpp"],"title":"C - Cpp","uri":"/cc/"},{"categories":["program_languages"],"content":" cmake ","date":"2022-04-20","objectID":"/cc/:5:0","tags":["c","cpp"],"title":"C - Cpp","uri":"/cc/"},{"categories":["program_languages"],"content":" add compilation options add_compile_options(-g) ","date":"2022-04-20","objectID":"/cc/:5:1","tags":["c","cpp"],"title":"C - Cpp","uri":"/cc/"},{"categories":["tool"],"content":" git cli ","date":"2022-04-08","objectID":"/git/:1:0","tags":["git"],"title":"Git","uri":"/git/"},{"categories":["tool"],"content":" git branch git rev-parse --abbrev-ref HEAD ","date":"2022-04-08","objectID":"/git/:1:1","tags":["git"],"title":"Git","uri":"/git/"},{"categories":["tool"],"content":" git tags git describe --abbrev=0 --tags HEAD ","date":"2022-04-08","objectID":"/git/:1:2","tags":["git"],"title":"Git","uri":"/git/"},{"categories":["tool"],"content":" git hash git rev-parse HEAD ","date":"2022-04-08","objectID":"/git/:1:3","tags":["git"],"title":"Git","uri":"/git/"},{"categories":["tool"],"content":" clone ","date":"2022-04-08","objectID":"/git/:2:0","tags":["git"],"title":"Git","uri":"/git/"},{"categories":["tool"],"content":" single branch git clone \u003curl\u003e --branch \u003cbranch/tag\u003e --single-branch [\u003cfolder\u003e] ","date":"2022-04-08","objectID":"/git/:2:1","tags":["git"],"title":"Git","uri":"/git/"},{"categories":["tool"],"content":" submodule ","date":"2022-04-08","objectID":"/git/:3:0","tags":["git"],"title":"Git","uri":"/git/"},{"categories":["program_languages"],"content":" String \u0026 Bytes ","date":"2022-04-03","objectID":"/python/:1:0","tags":["python"],"title":"Python","uri":"/python/"},{"categories":["program_languages"],"content":" bytes to string return b\"abc123\".decode(\"utf-8\") abc123 ","date":"2022-04-03","objectID":"/python/:1:1","tags":["python"],"title":"Python","uri":"/python/"},{"categories":["program_languages"],"content":" string to bytes return \"abc123\".encode(\"utf-8\") b'abc123' ","date":"2022-04-03","objectID":"/python/:1:2","tags":["python"],"title":"Python","uri":"/python/"},{"categories":["program_languages"],"content":" time from time import gmtime, localtime, strftime def print_gmtime(): strftime(\"%a, %d %b %Y %H:%M:%S +0000\", gmtime()) def print_localtime(): return strftime(\"%a, %d %b %Y %H:%M:%S +0000\", localtime()) None ","date":"2022-04-03","objectID":"/python/:2:0","tags":["python"],"title":"Python","uri":"/python/"},{"categories":["program_languages"],"content":" socket ","date":"2022-04-03","objectID":"/python/:3:0","tags":["python"],"title":"Python","uri":"/python/"},{"categories":["program_languages"],"content":" server # Echo server program import socket from time import gmtime, strftime HOST = '192.168.97.2' # Symbolic name meaning all available interfaces PORT = 50007 # Arbitrary non-privileged port with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: s.bind((HOST, PORT)) s.listen(1) conn, addr = s.accept() with conn: print('Connected by', addr) while True: data = conn.recv(1024) print(strftime(\"%a, %d %b %Y %H:%M:%S +0000\", gmtime()) + \"receive: \" + str(data)) if not data: break conn.sendall(data) ","date":"2022-04-03","objectID":"/python/:3:1","tags":["python"],"title":"Python","uri":"/python/"},{"categories":["program_languages"],"content":" client # Echo client program import socket import time HOST = '192.168.97.2' # The remote host PORT = 50007 # The same port as used by the server with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: s.connect((HOST, PORT)) while True: s.sendall(b'Hello, world') data = s.recv(1024) print('Received', repr(data)) time.sleep(1) ","date":"2022-04-03","objectID":"/python/:3:2","tags":["python"],"title":"Python","uri":"/python/"},{"categories":["program_languages"],"content":" class ","date":"2022-04-03","objectID":"/python/:4:0","tags":["python"],"title":"Python","uri":"/python/"},{"categories":["program_languages"],"content":" super 理论上 super() 可以直接 call 嗷, 返回父类 调用父类函数时候, self指向的是子类 多继承的时候, 直接 super().func() 会从 mro 中, 从第二个找拥有 func() 的类 如果使用 super(clazz, self).func() 则会从 clazz.mro 中的第二个类开始找 ","date":"2022-04-03","objectID":"/python/:4:1","tags":["python"],"title":"Python","uri":"/python/"},{"categories":["program_languages"],"content":" plot networkx → graphviz ","date":"2022-04-03","objectID":"/python/:5:0","tags":["python"],"title":"Python","uri":"/python/"},{"categories":["program_languages"],"content":" networkx to graphviz import graphviz import networkx as nx G = nx.DiGraph() # G.add_node(u) # G.add_edge(u, v, label=label) A = nx.nx_agraph.to_agraph(G) A.layout(\"dot\") A.draw('graph.pdf') ","date":"2022-04-03","objectID":"/python/:5:1","tags":["python"],"title":"Python","uri":"/python/"},{"categories":["program_languages"],"content":" dot example digraph { rankdir=LR; node [shape=ellipse]; edge [color=red]; A [label=\"Start\"]; B [label=\"Read input\"]; C [label=\"Process input\"]; D [label=\"Write output\"]; E [label=\"Stop\"]; A -\u003e B; B -\u003e C; C -\u003e D [label=\"Yes\"]; D -\u003e E; C -\u003e E [label=\"No\"]; {rank=same; B C} } cli dot -Tpng -Kdot -odot.png example.dot ","date":"2022-04-03","objectID":"/python/:5:2","tags":["python"],"title":"Python","uri":"/python/"},{"categories":["emacs"],"content":" defun defun define function (defun function-name (args) (interactive \"...\") ... ) interactive code: reference ","date":"2022-03-31","objectID":"/elisp/:1:0","tags":["emacs"],"title":"Elisp","uri":"/elisp/"},{"categories":["emacs"],"content":" interactive 通过 interactive 可以把一个函数变成一个可交互的命令 interactive 的命令才可以通过 M-x 执行, 类似把这个函数对用户 public ","date":"2022-03-31","objectID":"/elisp/:1:1","tags":["emacs"],"title":"Elisp","uri":"/elisp/"},{"categories":["emacs"],"content":" file ","date":"2022-03-31","objectID":"/elisp/:2:0","tags":["emacs"],"title":"Elisp","uri":"/elisp/"},{"categories":["emacs"],"content":" get parent directory (file-name-directory buffer-file-name) ","date":"2022-03-31","objectID":"/elisp/:2:1","tags":["emacs"],"title":"Elisp","uri":"/elisp/"},{"categories":["emacs"],"content":" buffer \u0026 window ","date":"2022-03-31","objectID":"/elisp/:3:0","tags":["emacs"],"title":"Elisp","uri":"/elisp/"},{"categories":["emacs"],"content":" get 可以通过 (get-buffer BUFFER_NAME) / (get-buffer-window 直接拿到 buffer / window 可以不存在的话是 nil ","date":"2022-03-31","objectID":"/elisp/:3:1","tags":["emacs"],"title":"Elisp","uri":"/elisp/"},{"categories":["emacs"],"content":" switch window 的话可以用 ace-window 的 aw-switch-to-window WINDOW_NAME ","date":"2022-03-31","objectID":"/elisp/:3:2","tags":["emacs"],"title":"Elisp","uri":"/elisp/"},{"categories":["F1"],"content":" Rules ","date":"2022-03-31","objectID":"/f1/:1:0","tags":["F1"],"title":"F1","uri":"/f1/"},{"categories":["F1"],"content":" 轮胎 每场比赛至少使用两种轮胎 每个赛事周提供 5 种 13 套轮胎 干胎 UltraSoft, SuperSoft, Soft, Medium, Hard 赛时根据比赛场地提供三种干轮, 作为该场的 Soft, Medium, Hard 雨胎 Intermediate, Wet ","date":"2022-03-31","objectID":"/f1/:1:1","tags":["F1"],"title":"F1","uri":"/f1/"},{"categories":["F1"],"content":" Theory ","date":"2022-03-31","objectID":"/f1/:2:0","tags":["F1"],"title":"F1","uri":"/f1/"},{"categories":["F1"],"content":" Tyres 工作温度 越硬工作温度越高 Tyre blankets 可以提供大概 70℃ 理论上每种胎每圈速度差分别在 0.5s 和 0.8s, 但是具体赛道有差别 Tyres Temperature(℃) Hard 110 - 140 Middle 100 - 130 Soft 90 - 120 磨损 跟车时在弯道下压力不足打滑会增大磨损 ","date":"2022-03-31","objectID":"/f1/:2:1","tags":["F1"],"title":"F1","uri":"/f1/"},{"categories":["F1"],"content":" Undercut \u0026 Overcut ref: Chain Bear: Triggering undercuts and stretching the tyre life - How Strategy shaped the French Grand Prix 通过一些进站策略拿到位置, 避免正面对抗 适用情况: 在对手身后, 落后 1 ~ 3 s, 不好直接进攻 注意出站后是否在 free air Undercut 早进站, 靠新轮胎优势追进 pit delta (约25+-s) 对手如果进站会落在身后 Overcut 如果对手换新胎升温慢/难达到工作温度, 前几圈速度较慢 靠旧胎速度优势将对手拉开 pit delta 再进站, 出站后在对手身前 ","date":"2022-03-31","objectID":"/f1/:2:2","tags":["F1"],"title":"F1","uri":"/f1/"},{"categories":["F1"],"content":" Techniques ","date":"2022-03-31","objectID":"/f1/:3:0","tags":["F1"],"title":"F1","uri":"/f1/"},{"categories":["F1"],"content":" Overtake \u0026 Defense ","date":"2022-03-31","objectID":"/f1/:3:1","tags":["F1"],"title":"F1","uri":"/f1/"},{"categories":["F1"],"content":" TC introduction TC(Traction Control) 可以帮助控制引擎输出功率, 防止打滑 也限制了输出功率, 以及一些需要轻微打滑的时候没有办法让轮胎打滑 本质上是 RPM 的问题 drive without TC 非常非常困难, 关了 TC 每次急了油门给大一点都是 spin throttle 过弯 apex 之后, 油门不要超过 1/2, 方向打正前不能全油门, 在回正方向过程中可以缓慢增大油门 感受轮胎/赛道抓地力动态调整出弯油门的极限 Throttle Linearity 设置成 50 左右可以有效防止加油过快 save the car 感觉到失去抓地力即将打滑的时候, 轻松油门, 快速反打方向, 并回正(或继续反打) short-shifting 出弯时, 不用等到转速达到上限才升档, 8000-10000 转即可升档 提前换档可以提前踩更多油门 低档位和雨天效果明显 ERS 在获得足够抓地力/方向盘回正全油门之前开 ERS 容易 spin kerbs 在路肩上加油门 非常 容易 spin ! on-throttle differential 开高速度更快但更容易 spin 轻微降低可以显著避免 spin reference https://www.youtube.com/watch?v=1SJXAanpEJ4 https://www.youtube.com/watch?v=pUuxiD-iNFg\u0026t=1s ","date":"2022-03-31","objectID":"/f1/:3:2","tags":["F1"],"title":"F1","uri":"/f1/"},{"categories":["F1"],"content":" Strategy stream ","date":"2022-03-31","objectID":"/f1/:4:0","tags":["F1"],"title":"F1","uri":"/f1/"},{"categories":["F1"],"content":" settings ","date":"2022-03-31","objectID":"/f1/:5:0","tags":["F1"],"title":"F1","uri":"/f1/"},{"categories":["Emacs"],"content":" projectile 好像并不是所有常见项目都会被识别成 projectile , 所以根目录加一个空 .projectile 文件 ","date":"2022-03-31","objectID":"/doom/:1:0","tags":["Emacs"],"title":"Doom","uri":"/doom/"},{"categories":["Emacs"],"content":" ignore projectile ignore 依赖于 projectile-indexing-method projectile-indexing-method alien 直接使用外部index, projectile do nothing 效率最好 hybrid external tool + projectile filter 直接用 .projectile 声明 ignore 好像不总有效 .ignore 中写 exclude/include 会更好点(因为用的是 rg) native Emacs lisp indexing 很慢 ","date":"2022-03-31","objectID":"/doom/:1:1","tags":["Emacs"],"title":"Doom","uri":"/doom/"},{"categories":["Emacs"],"content":" issue ","date":"2022-03-31","objectID":"/doom/:2:0","tags":["Emacs"],"title":"Doom","uri":"/doom/"},{"categories":["Emacs"],"content":" balanced bracket 理论上 Emacs native 的 sexp 是可以直接匹配的, 但是好像 evil 下行为模式有些不一样 Key Function C-M-(f/b/n/p) supposed to be jumping to balanced bracket ","date":"2022-03-31","objectID":"/doom/:2:1","tags":["Emacs"],"title":"Doom","uri":"/doom/"},{"categories":["tools"],"content":" arch packages manjora plasma sudo pacman -S --noconfirm \\ base-devel \\ linux-headers \\ networkmanager \\ xorg \\ xorg-xinit \\ wezterm \\ wget \\ bear \\ bc \\ cmake \\ boost \\ gdb \\ ctags \\ global \\ cpio \\ pahole \\ grub \\ ripgrep \\ libgccjit \\ libvirt \\ virt-manager \\ virt-install \\ bridge-utils \\ qemu-full \\ docker \\ ntfs-3g \\ llvm \\ clang \\ go \\ rust \\ ant \\ lib32-glibc \\ maven \\ graphviz pip install epc \\ six \\ pyright \\ matplotlib \\ networkx \\ pygments ","date":"2022-03-13","objectID":"/toolchain/:1:0","tags":["tools"],"title":"ToolChain","uri":"/toolchain/"},{"categories":["tools"],"content":" personal pakcages yay -S --noconfirm \\ nitrogen \\ google-chrome \\ nerd-fonts-git \\ adobe-source-han-sans-cn-fonts \\ adobe-source-han-serif-cn-fonts \\ ttf-symbola \\ ttf-dejavu \\ noto-fonts \\ noto-fonts-emoji \\ noto-fonts-cjk \\ ttf-dejavu-nerd \\ wqy-microhei \\ wqy-microhei-lite \\ wqy-bitmapfont \\ wqy-zenhei \\ discord \\ dunst \\ zoom \\ slack-desktop \\ flameshot \\ btop \\ isync \\ msmtp \\ neofetch \\ pipewire-pulse \\ pavumeter \\ pavucontrol \\ alsa-utils \\ paprefs \\ pasystray \\ hugo \\ fzf \\ exa \\ pandoc \\ wezterm \\ chafa \\ perl-image-exiftool \\ giflib \\ starship \\ rofi \\ words \\ stow \\ vlc \\ tree-sitter \\ ibus-rime \\ nemo \\ autojump \\ krita \\ netease-cloud-music \\ picom \\ mu-git \\ aspell \\ aspell-en \\ texlive-bin \\ radare2 \\ git-delta \\ screenkey \\ volnoti \\ sayonara \\ pypy3 \\ inkscape ","date":"2022-03-13","objectID":"/toolchain/:1:1","tags":["tools"],"title":"ToolChain","uri":"/toolchain/"},{"categories":["tools"],"content":" Internet ","date":"2022-03-13","objectID":"/toolchain/:2:0","tags":["tools"],"title":"ToolChain","uri":"/toolchain/"},{"categories":["tools"],"content":" Network connection VPN v2ray \u0026 v2rayA proxy proxychains anonymous Tor ","date":"2022-03-13","objectID":"/toolchain/:2:1","tags":["tools"],"title":"ToolChain","uri":"/toolchain/"},{"categories":["tools"],"content":" Web browsers Chrome ","date":"2022-03-13","objectID":"/toolchain/:2:2","tags":["tools"],"title":"ToolChain","uri":"/toolchain/"},{"categories":["tools"],"content":" Communication Email gmail mu4e ","date":"2022-03-13","objectID":"/toolchain/:2:3","tags":["tools"],"title":"ToolChain","uri":"/toolchain/"},{"categories":["tools"],"content":" remote desktop Remote desktop servers TigerVNC NoMachine Remote desktop clients TigerVNC Anydesk ","date":"2022-03-13","objectID":"/toolchain/:2:4","tags":["tools"],"title":"ToolChain","uri":"/toolchain/"},{"categories":["tools"],"content":" Multimedia ","date":"2022-03-13","objectID":"/toolchain/:3:0","tags":["tools"],"title":"ToolChain","uri":"/toolchain/"},{"categories":["tools"],"content":" Image Image viewer geeqie Image processing Krita font editor fontforge Screenshot flameshot snipaste ","date":"2022-03-13","objectID":"/toolchain/:3:1","tags":["tools"],"title":"ToolChain","uri":"/toolchain/"},{"categories":["tools"],"content":" audio system alsamixer editor Audacity ","date":"2022-03-13","objectID":"/toolchain/:3:2","tags":["tools"],"title":"ToolChain","uri":"/toolchain/"},{"categories":["tools"],"content":" video player VLC ","date":"2022-03-13","objectID":"/toolchain/:3:3","tags":["tools"],"title":"ToolChain","uri":"/toolchain/"},{"categories":["tools"],"content":" Utilities ","date":"2022-03-13","objectID":"/toolchain/:4:0","tags":["tools"],"title":"ToolChain","uri":"/toolchain/"},{"categories":["tools"],"content":" Terminal Command shells fish (bash incompatible) zsh oh-my-zsh starship fzf-tab zsh-syntax-highlighting Terminal Emulator alacritty kitty Byobu Zellij wezterm vterm ","date":"2022-03-13","objectID":"/toolchain/:4:1","tags":["tools"],"title":"ToolChain","uri":"/toolchain/"},{"categories":["tools"],"content":" Files File Manager SpaceFM (severe problem: NO TRASH FOLDER) nemo Archive managers 7zip ","date":"2022-03-13","objectID":"/toolchain/:4:2","tags":["tools"],"title":"ToolChain","uri":"/toolchain/"},{"categories":["tools"],"content":" development Emacs doom emacs ","date":"2022-03-13","objectID":"/toolchain/:4:3","tags":["tools"],"title":"ToolChain","uri":"/toolchain/"},{"categories":["tools"],"content":" Text Input ibus ibus-rime ","date":"2022-03-13","objectID":"/toolchain/:4:4","tags":["tools"],"title":"ToolChain","uri":"/toolchain/"},{"categories":["tools"],"content":" System Task managers btop htop System log viewers journalctl Font Viewer NA Fonts awesome font SauceCodePro Nerd Font Mono ","date":"2022-03-13","objectID":"/toolchain/:4:5","tags":["tools"],"title":"ToolChain","uri":"/toolchain/"},{"categories":["tools"],"content":" Documents and texts ","date":"2022-03-13","objectID":"/toolchain/:5:0","tags":["tools"],"title":"ToolChain","uri":"/toolchain/"},{"categories":["tools"],"content":" Office freeoffice ","date":"2022-03-13","objectID":"/toolchain/:5:1","tags":["tools"],"title":"ToolChain","uri":"/toolchain/"},{"categories":["tools"],"content":" Readers and viewers pdfstudioviewer ","date":"2022-03-13","objectID":"/toolchain/:5:2","tags":["tools"],"title":"ToolChain","uri":"/toolchain/"},{"categories":["tools"],"content":" Security ","date":"2022-03-13","objectID":"/toolchain/:6:0","tags":["tools"],"title":"ToolChain","uri":"/toolchain/"},{"categories":["tools"],"content":" Password managers gpg ","date":"2022-03-13","objectID":"/toolchain/:6:1","tags":["tools"],"title":"ToolChain","uri":"/toolchain/"},{"categories":["tools"],"content":" Others ","date":"2022-03-13","objectID":"/toolchain/:7:0","tags":["tools"],"title":"ToolChain","uri":"/toolchain/"},{"categories":["tools"],"content":" Desktop environments Window Manager Xmonad Task Bar Xmobar System tray stalonetrayer trayer Wallpaper nitrogen Notification dunst Logout sddm ","date":"2022-03-13","objectID":"/toolchain/:7:1","tags":["tools"],"title":"ToolChain","uri":"/toolchain/"},{"categories":["program_languages"],"content":" class ","date":"2022-03-13","objectID":"/java/:1:0","tags":["java"],"title":"Java","uri":"/java/"},{"categories":["program_languages"],"content":" template template 是 compilation feature, cannot instantiate a template with dynamic class at runtime ","date":"2022-03-13","objectID":"/java/:1:1","tags":["java"],"title":"Java","uri":"/java/"},{"categories":["program_languages"],"content":" enum enum 默认是 String 用 enum.valueOf(str) convert to enum integer enum public enum Type { SIGN_CREATE(0), SIGN_CREATE_BONUS(1), HOME_SCREEN(2), REGISTER_SCREEN(3); private final int value; Type(final int v){value = v;} public int getValue() { return value; } } 用 index 访问 Type.values()[index] ","date":"2022-03-13","objectID":"/java/:1:2","tags":["java"],"title":"Java","uri":"/java/"},{"categories":["program_languages"],"content":" Project ","date":"2022-03-13","objectID":"/java/:2:0","tags":["java"],"title":"Java","uri":"/java/"},{"categories":["program_languages"],"content":" classpath 访问 resources 也是需要在 classpath 中声明的 ","date":"2022-03-13","objectID":"/java/:2:1","tags":["java"],"title":"Java","uri":"/java/"},{"categories":["program_languages"],"content":" Serialize ","date":"2022-03-13","objectID":"/java/:3:0","tags":["java"],"title":"Java","uri":"/java/"},{"categories":["program_languages"],"content":" Gson Gson 应该是还比较好的方案了吧, 没有什么CVE问题 ","date":"2022-03-13","objectID":"/java/:3:1","tags":["java"],"title":"Java","uri":"/java/"},{"categories":["program_languages"],"content":" Process ","date":"2022-03-13","objectID":"/java/:4:0","tags":["java"],"title":"Java","uri":"/java/"},{"categories":["program_languages"],"content":" 阻塞 process 创建时默认重定向到 pipe, 如果主线程不及时读取 pipe 的内容, pipe buffer 会堵塞 ","date":"2022-03-13","objectID":"/java/:4:1","tags":["java"],"title":"Java","uri":"/java/"},{"categories":["program_languages"],"content":" format Conversion Argument Category Description 'b', 'B' general If the argument arg is null, then the result is \"false\". If arg is a boolean or Boolean, then the result is the string returned by String.valueOf(). Otherwise, the result is \"true\". 'h', 'H' general If the argument arg is null, then the result is \"null\". Otherwise, the result is obtained by invoking Integer.toHexString(arg.hashCode()). 's', 'S' general If the argument arg is null, then the result is \"null\". If arg implements Formattable, then arg.formatTo is invoked. Otherwise, the result is obtained by invoking arg.toString(). 'c', 'C' character The result is a Unicode character 'd' integral The result is formatted as a decimal integer 'o' integral The result is formatted as an octal integer 'x', 'X' integral The result is formatted as a hexadecimal integer 'e', 'E' floating point The result is formatted as a decimal number in computerized scientific notation 'f' floating point The result is formatted as a decimal number 'g', 'G' floating point The result is formatted using computerized scientific notation or decimal format, depending on the precision and the value after rounding. 'a', 'A' floating point The result is formatted as a hexadecimal floating-point number with a significand and an exponent 't', 'T' date/time Prefix for date and time conversion characters. See Date/Time Conversions. '%' percent The result is a literal '%' ('\\u0025') 'n' line separator The result is the platform-specific line separator ","date":"2022-03-13","objectID":"/java/:5:0","tags":["java"],"title":"Java","uri":"/java/"},{"categories":["program_languages"],"content":" date ","date":"2022-03-13","objectID":"/java/:6:0","tags":["java"],"title":"Java","uri":"/java/"},{"categories":["program_languages"],"content":" format import java.text.DateFormat; import java.text.SimpleDateFormat; import org.apache.commons.lang3.time.DurationFormatUtils; DateFormat formatter = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS\"); System.out.println(formatter.format(System.currentTimeMillis())); DurationFormatUtils.formatDuration(millis, \"HH:mm:ss.SSS\") 2022-04-18 20:53:33.000538 ","date":"2022-03-13","objectID":"/java/:6:1","tags":["java"],"title":"Java","uri":"/java/"},{"categories":["program_languages"],"content":" iterator iterator and remove for(Iterator\u003cMap.Entry\u003cString, String\u003e\u003e it = map.entrySet().iterator(); it.hasNext(); ) { Map.Entry\u003cString, String\u003e entry = it.next(); if(entry.getKey().equals(\"\")) { it.remove(); } } ","date":"2022-03-13","objectID":"/java/:6:2","tags":["java"],"title":"Java","uri":"/java/"},{"categories":["program_languages"],"content":" File ","date":"2022-03-13","objectID":"/java/:7:0","tags":["java"],"title":"Java","uri":"/java/"},{"categories":["program_languages"],"content":" Path 一般直接用 Path 处理路径 Path.toFile() 直接转 File join Path currentPath = Paths.get(System.getProperty(\"user.dir\")); Path filePath = Paths.get(currentPath.toString(), \"data\", \"foo.txt\"); System.out.println(filePath.toString()); ","date":"2022-03-13","objectID":"/java/:7:1","tags":["java"],"title":"Java","uri":"/java/"},{"categories":["program_languages"],"content":" list file File[] files = new File(\"/home\").listFiles(); ","date":"2022-03-13","objectID":"/java/:7:2","tags":["java"],"title":"Java","uri":"/java/"},{"categories":["program_languages"],"content":" copy\u0026move move Option REPLACE_EXISTING ATOMIC_MOVE Files.move(Paths.get(src), Paths.get(dest), null); copy Files.copy(Paths.get(src), Paths.get(dest), null); ","date":"2022-03-13","objectID":"/java/:7:3","tags":["java"],"title":"Java","uri":"/java/"},{"categories":["program_languages"],"content":" Write to File BufferedWriter 写 String String str = \"Hello\"; BufferedWriter writer = new BufferedWriter(new FileWriter(fileName)); writer.write(str); writer.close(); FileOutputStream 写 bytes String str = \"Hello\"; FileOutputStream outputStream = new FileOutputStream(fileName); byte[] strToBytes = str.getBytes(); outputStream.write(strToBytes); outputStream.close(); ","date":"2022-03-13","objectID":"/java/:7:4","tags":["java"],"title":"Java","uri":"/java/"},{"categories":["program_languages"],"content":" Reflect ","date":"2022-03-13","objectID":"/java/:8:0","tags":["java"],"title":"Java","uri":"/java/"},{"categories":["program_languages"],"content":" from class Field[] allFields = Person.class.getDeclaredFields(); assertEquals(2, allFields.length); assertTrue(Arrays.stream(allFields).anyMatch(field -\u003e field.getName().equals(LAST_NAME_FIELD) \u0026\u0026 field.getType().equals(String.class))); assertTrue(Arrays.stream(allFields).anyMatch(field -\u003e field.getName().equals(FIRST_NAME_FIELD) \u0026\u0026 field.getType().equals(String.class))); ","date":"2022-03-13","objectID":"/java/:8:1","tags":["java"],"title":"Java","uri":"/java/"},{"categories":["program_languages"],"content":" Object ","date":"2022-03-13","objectID":"/java/:9:0","tags":["java"],"title":"Java","uri":"/java/"},{"categories":["program_languages"],"content":" copy deep-copy problem A common solution to the deep copy problem is to use Java Object Serialization (JOS). Unfortunately, this approach has some problems, too: It will only work when the object being copied, as well as all of the other objects references directly or indirectly by the object, are serializable. (In other words, they must implement java.io.Serializable.) Fortunately it is often sufficient to simply declare that a given class implements java.io.Serializable and let Java’s default serialization mechanisms do their thing. Java Object Serialization is slow, and using it to make a deep copy requires both serializing and deserializing. There are ways to speed it up (e.g., by pre-computing serial version ids and defining custom readObject() and writeObject() methods), but this will usually be the primary bottleneck. The byte array stream implementations included in the java.io package are designed to be general enough to perform reasonable well for data of different sizes and to be safe to use in a multi-threaded environment. These characteristics, however, slow down ByteArrayOutputStream and (to a lesser extent) ByteArrayInputStream. ","date":"2022-03-13","objectID":"/java/:9:1","tags":["java"],"title":"Java","uri":"/java/"},{"categories":["program_languages"],"content":" Disassembly ","date":"2022-03-13","objectID":"/java/:10:0","tags":["java"],"title":"Java","uri":"/java/"},{"categories":["program_languages"],"content":" class Parse class file javap [-c] \u003cclass_name\u003e.class options description -c Disassemble the code ","date":"2022-03-13","objectID":"/java/:10:1","tags":["java"],"title":"Java","uri":"/java/"},{"categories":["program_languages"],"content":" jar extract jar xf \u003cjar_file\u003e.jar ","date":"2022-03-13","objectID":"/java/:10:2","tags":["java"],"title":"Java","uri":"/java/"},{"categories":["program_languages"],"content":" Debug ","date":"2022-03-13","objectID":"/java/:11:0","tags":["java"],"title":"Java","uri":"/java/"},{"categories":["program_languages"],"content":" jprofiler ","date":"2022-03-13","objectID":"/java/:11:1","tags":["java"],"title":"Java","uri":"/java/"},{"categories":["regex"],"content":" recursion PERL, PERC 中 有类似 \\g\u003cn\u003e \\g{n} 的 backreference constructs 用来标识第 n 个 group 的正则式 java.util.regex 不支持 backreference constructs 也没有 Maven Repository 支持 backreference constructs 浪费了我一天时间 ","date":"2022-03-13","objectID":"/regex/:1:0","tags":["regex"],"title":"Regex","uri":"/regex/"},{"categories":["emacs"],"content":" emacs-calculator 逆波兰表示法. 栈垂直向下生长. ","date":"2022-03-06","objectID":"/calc/:1:0","tags":["emacs"],"title":"Calc","uri":"/calc/"},{"categories":["emacs"],"content":" 类型 模数 mod 复数 (-1, 2) -\u003e -1 + 2i 分数 numerator:denominator 会自动约分 基数 输入 radix#exp 向量 [4, 1, 5] [ [ 1, 2, 3 ] [ 4, 5, 6 ] [ 6, 7, 8 ] ] 代数表达式 以 ' 开头输入 a^3 + a^2 b / c d - a / b \"big language\" 使用 evaluates-to 赋值 2 3 b a a 1: a + ---- - - c d b 图形 gnuplot HMS 表示时间角度 1: 7@ 55' 13\" -\u003e 7h 55m 13s 时间 1: \u003c6:59:34pm Tue Jun 23, 2009\u003e 输入的数字会作为天来看待 ","date":"2022-03-06","objectID":"/calc/:1:1","tags":["emacs"],"title":"Calc","uri":"/calc/"},{"categories":["emacs"],"content":" shortcut Key Function Q Sqrt p set precision BACKSPACE pop/delete D r change radix display U c unit conversion a x calc expand a s calc simplify a d derivative a i integral ","date":"2022-03-06","objectID":"/calc/:1:2","tags":["emacs"],"title":"Calc","uri":"/calc/"},{"categories":["program_languages"],"content":" Tricky ","date":"2022-03-01","objectID":"/golang/:1:0","tags":["Golang"],"title":"Golang","uri":"/golang/"},{"categories":["program_languages"],"content":" string convert string to int string := strconv.Itoa(int) int to string int, err := strconv.Atoi(\"string\") ","date":"2022-03-01","objectID":"/golang/:1:1","tags":["Golang"],"title":"Golang","uri":"/golang/"},{"categories":["program_languages"],"content":" Fundamental ","date":"2022-03-01","objectID":"/golang/:2:0","tags":["Golang"],"title":"Golang","uri":"/golang/"},{"categories":["program_languages"],"content":" struct new var object StuctcName = StructName{Prop: value} ","date":"2022-03-01","objectID":"/golang/:2:1","tags":["Golang"],"title":"Golang","uri":"/golang/"},{"categories":["emacs"],"content":" Keymap Keymap Function C-M-f forward-sexp (coresponding bracket) C-M-b backward-sexp (coresponding bracket) ","date":"2022-02-25","objectID":"/native/:1:0","tags":["emacs"],"title":"Native Emacs","uri":"/native/"},{"categories":["emacs"],"content":" org-mode Keymap Function C-c - add - ahead of current line ","date":"2022-02-25","objectID":"/native/:1:1","tags":["emacs"],"title":"Native Emacs","uri":"/native/"},{"categories":["emacs"],"content":" debug (setq debug-on-error t) ","date":"2022-02-25","objectID":"/native/:2:0","tags":["emacs"],"title":"Native Emacs","uri":"/native/"},{"categories":["emacs"],"content":" function function key functionality file-exists-p nil file exisit file-name-directory nil get the directory of a file buffer-file-name nil current buffer/file name backward-up-list C-M-u upper level element (method -\u003e class) ","date":"2022-02-25","objectID":"/native/:3:0","tags":["emacs"],"title":"Native Emacs","uri":"/native/"},{"categories":["emacs"],"content":" align 第一次知道 C-u M-x 调用的命令跟直接 M-x 调用的还是不一样的 C-u M-x align-regexp 使用的是更高级的 align-regexp regexp: match the place you are interested in aligning; to do it, one of its parenthesis groups will be extended with spaces, or shortened by deleting characters parenthesis group: choose which one spacing: if the group is shorter than this, spaces will be added to it; if it's longer, characters will be deleted from it, starting at the end (unless it's longer for the purposes of alignment, of course) repeat: well, this is obvious, I think justify: non-blank characters inside the group won't be deleted, and necessary spaces will be added/deleted from the left. On your second case, try: regexp \\([0-9]+\\), group -1. column (instead of spacing): align to that fixed column (of course, it doesn't work well with “repeat”). ","date":"2022-02-25","objectID":"/native/:4:0","tags":["emacs"],"title":"Native Emacs","uri":"/native/"},{"categories":["emacs"],"content":" GPG keeping your secrets encrypted on your file system is an easy way of keeping your secrets secret Gpg(GNU Privacy Guard) is natively supported in emacs called EasyPG 只用一个gpg key管理所有加密文件和链接 可以不用每次输密码获取 root 权限 ","date":"2022-02-25","objectID":"/native/:5:0","tags":["emacs"],"title":"Native Emacs","uri":"/native/"},{"categories":["emacs"],"content":" authinfo auth-sources 变量指定 authinfo 文件 格式 machine \u003cHOST\u003e login \u003cACCOUNT\u003e port \u003cPORT\u003e password \u003cPASSWORD\u003e example machine localhost login root port sudo password rootpasswd123 shell access gpg2 -q --for-your-eyes-only --no-tty -d ~/.authinfo.gpg | sed -n 's,^machine gmail.com .*password \\([^ ]*\\).*,\\1,p' ","date":"2022-02-25","objectID":"/native/:5:1","tags":["emacs"],"title":"Native Emacs","uri":"/native/"},{"categories":["emacs"],"content":" Creating a key gpg --gen-key ","date":"2022-02-25","objectID":"/native/:5:2","tags":["emacs"],"title":"Native Emacs","uri":"/native/"},{"categories":["emacs"],"content":" cache password ","date":"2022-02-25","objectID":"/native/:5:3","tags":["emacs"],"title":"Native Emacs","uri":"/native/"},{"categories":["emacs"],"content":" debug M-x debug-on-entry 设置入口 直接运行函数 ","date":"2022-02-25","objectID":"/native/:6:0","tags":["emacs"],"title":"Native Emacs","uri":"/native/"},{"categories":["emacs"],"content":" keymap Shortcut Function d step through c continue(step out) ","date":"2022-02-25","objectID":"/native/:6:1","tags":["emacs"],"title":"Native Emacs","uri":"/native/"},{"categories":["emacs"],"content":" font ","date":"2022-02-25","objectID":"/native/:7:0","tags":["emacs"],"title":"Native Emacs","uri":"/native/"},{"categories":["emacs"],"content":" describe char display current char info C-u C-x = ","date":"2022-02-25","objectID":"/native/:7:1","tags":["emacs"],"title":"Native Emacs","uri":"/native/"},{"categories":["emacs"],"content":" mu4e ","date":"2022-02-25","objectID":"/native/:8:0","tags":["emacs"],"title":"Native Emacs","uri":"/native/"},{"categories":["emacs"],"content":" init mu init --maildir=/home/yayu/.mail --my-address=@gmail.com --my-address=@ubc.ca ","date":"2022-02-25","objectID":"/native/:8:1","tags":["emacs"],"title":"Native Emacs","uri":"/native/"},{"categories":["emacs"],"content":" calfw A calendar framework for Emacs ","date":"2022-02-11","objectID":"/calendar/:1:0","tags":["emacs"],"title":"Calendar","uri":"/calendar/"},{"categories":["emacs"],"content":" org-gcal - Synchronization with google calenda 老项目不维护了, 新地址 org-gcal google cloud calendar could api 改版了真的好难用, 文档给的也过时了 还是勉勉强强按文档同步了, project 测试版就可以用 sync 直接 org-ical-sync 就可以fetch，但是怎么push呢 在 org-heading 上 call org-gcal-post-at-point 加个 properties, schedule 也会被写到 properties, 感觉差不多能用 有个小问题是，sync一次之后，老是出现 rx--translate-bounded-repetition: rx ‘**’ range error auto archive auto archive g 了，sync的 rx '**' range error 是auto archive来的 PR 还没 merge了 , 先disable掉吧 ","date":"2022-02-11","objectID":"/calendar/:1:1","tags":["emacs"],"title":"Calendar","uri":"/calendar/"},{"categories":["diary"],"content":" 一般都说 hashmap 复杂度O(1), 感觉应该不完全是 研究一下 ","date":"2022-02-01","objectID":"/hashmap/:0:0","tags":["diary","hash"],"title":"Hashmap","uri":"/hashmap/"},{"categories":["diary"],"content":" Werid things 容易想到如果有无限大数组, 直接当作桶对 object 取 hash, 期望不会 collide 就行 显然没有无限大内存，怎么做 index ","date":"2022-02-01","objectID":"/hashmap/:1:0","tags":["diary","hash"],"title":"Hashmap","uri":"/hashmap/"},{"categories":["diary"],"content":" Java implement 实现是 hash_array (length: n to the pow of 2) 处理 collision linkedlist R-B tree ","date":"2022-02-01","objectID":"/hashmap/:2:0","tags":["diary","hash"],"title":"Hashmap","uri":"/hashmap/"},{"categories":["diary"],"content":" Index index map 的话, length 是 2 的幂次, hash 值直接取后n位, 作为 array 的 index 有人说是高位和低位异或的, 听起来更有道理, 之后看看源码 array 小还是比较容易碰撞的, 元素多了就扩容 ","date":"2022-02-01","objectID":"/hashmap/:3:0","tags":["diary","hash"],"title":"Hashmap","uri":"/hashmap/"},{"categories":["diary"],"content":" Resize ","date":"2022-02-01","objectID":"/hashmap/:4:0","tags":["diary","hash"],"title":"Hashmap","uri":"/hashmap/"},{"categories":["diary"],"content":" when 有个 loadFactor , 估计是说 array 的 density 高了 or 碰撞太多就 resize, 之后看看源码 ","date":"2022-02-01","objectID":"/hashmap/:4:1","tags":["diary","hash"],"title":"Hashmap","uri":"/hashmap/"},{"categories":["diary"],"content":" how double length 之后 array 都得遍历一下吧, list 直接重新算index插入 BR tree 转回两个 list, 再重新计算要不要转成RB tree upper bound 好像是 2^30, 还蛮大的, 不知道内存会占多少G ","date":"2022-02-01","objectID":"/hashmap/:4:2","tags":["diary","hash"],"title":"Hashmap","uri":"/hashmap/"},{"categories":["diary"],"content":" TODO Source code review ","date":"2022-02-01","objectID":"/hashmap/:5:0","tags":["diary","hash"],"title":"Hashmap","uri":"/hashmap/"},{"categories":["diary"],"content":" Summary 显然查询是乐观估计的O(1), 最差是O(log_n), 不过应该是达不到最差, resize得当的话应该一直接近O(1) 添加删除需要重构, 假设元素个数等于数组长度就扩容, 迭代元素的复杂度均摊是O(2n) 不过RB tree建树是O(n*log_n)的, 碰撞率是 v 的话, 这一部分的复杂度差不多是O(nv*log_nv), 介于 v 太小所以也可以近似忽略吧 总的来说 hash + resize 算法好的话, 碰撞率太低了, 还是可以认为 hashmap 复杂度是近似O(1)的 ","date":"2022-02-01","objectID":"/hashmap/:6:0","tags":["diary","hash"],"title":"Hashmap","uri":"/hashmap/"},{"categories":["高论"],"content":" WX的十宗罪 说实话啊， wx真nmd不是个人啊 ","date":"2022-01-28","objectID":"/wechat/:1:0","tags":["diary,","wechat"],"title":"Wechat","uri":"/wechat/"},{"categories":["高论"],"content":" 战犯日志 \u003c2023-01-20 Fri\u003e windows wx一天闪退 10 次 \u003c2022-02-08 Tue\u003e 零钱提现银行卡10金币一个nt免费券 \u003c2022-02-09 Wed\u003e windows 登录一次, 回 linux 就 nml 太长时间未登录，切一次登录一次, 玩nm \u003c2022-02-21 Mon\u003e 语音12个小时就必断一次是吧，sbnt ","date":"2022-01-28","objectID":"/wechat/:1:1","tags":["diary,","wechat"],"title":"Wechat","uri":"/wechat/"},{"categories":["高论"],"content":" 能不能把你tmlgb的文件存好啊 一周前发的照片就打不开 一个月前发的文件就已过期 ntmlgdb腾讯云是不是不是你们家的啊，还是ntmd的wx不是腾讯产品? 文件存储做不到，出个会员绑定个腾讯云服务也做不到？ 纯jbnt ","date":"2022-01-28","objectID":"/wechat/:1:2","tags":["diary,","wechat"],"title":"Wechat","uri":"/wechat/"},{"categories":["高论"],"content":" pyq 朋友圈朋的是个jb啊，发个pyq永远不能编辑，发错就要删，发错就要删，删nmlgcb，不如直接把nm删了 ","date":"2022-01-28","objectID":"/wechat/:1:3","tags":["diary,","wechat"],"title":"Wechat","uri":"/wechat/"},{"categories":["hugo"],"content":" org 理论上原生支持org, 好像直接解释为markdown了 分割线 需要5个 dash - ","date":"2022-01-28","objectID":"/hugo/:1:0","tags":["hugo"],"title":"Hugo","uri":"/hugo/"},{"categories":["hugo"],"content":" Front matter 是个啥呢 #+__property__: __value__ 这样设置一些属性 example #+date: Fri, 28 Jan 2022 23:05:33 +0800 #+summary: hugo things #+tags[]: tagA tagB #+categories[] catA catB front matter 得有 date 才能识别到 archive 里面 ","date":"2022-01-28","objectID":"/hugo/:1:1","tags":["hugo"],"title":"Hugo","uri":"/hugo/"},{"categories":["hugo"],"content":" TOC ORG 的 TOC 好像有点问题 不过是根据 theme 来的，所以应该还好 \u003c2022-02-23 Wed\u003e UPDATE toc 直接 {{ .TableofContents }} 就可以生成 ","date":"2022-01-28","objectID":"/hugo/:1:2","tags":["hugo"],"title":"Hugo","uri":"/hugo/"},{"categories":["hugo"],"content":" 使用不同主题 hugo 并不支持在一个site中使用多个theme ","date":"2022-01-28","objectID":"/hugo/:2:0","tags":["hugo"],"title":"Hugo","uri":"/hugo/"},{"categories":["hugo"],"content":" Solution 在不同子路径下创建多个仓库生成不同站点，生成到同一个public目录下 ","date":"2022-01-28","objectID":"/hugo/:2:1","tags":["hugo"],"title":"Hugo","uri":"/hugo/"},{"categories":["hugo"],"content":" css 与theme相关 一般直接在assets/ 想给 \u003ch1\u003e 前加个 \u003chr\u003e 加不上.. ","date":"2022-01-28","objectID":"/hugo/:3:0","tags":["hugo"],"title":"Hugo","uri":"/hugo/"},{"categories":["hugo"],"content":" font 不是很好看 准备换一下 header 也改一下 找不到好看字体摆烂了，直接 system ui 换上 sauce code pro + dejavu 了 ","date":"2022-01-28","objectID":"/hugo/:3:1","tags":["hugo"],"title":"Hugo","uri":"/hugo/"},{"categories":["hugo"],"content":" DateFormat 折磨 又 debug 一晚上, hugo 不会 build 超过当前日期的时间, 且 Hugo 默认采用的是格林尼治标准时间, 所以默认 8h 内的文章不会显示 强制 build 未来文章: hugo --buildFuture / buildFuture = true 用识别时区的格式 Sat, 12 Mar 2022 23:43:48 +0800 文章 date 字段需要是以下格式 const ( Layout = \"01/02 03:04:05PM '06 -0700\" // The reference time, in numerical order. ANSIC = \"Mon Jan _2 15:04:05 2006\" UnixDate = \"Mon Jan _2 15:04:05 MST 2006\" RubyDate = \"Mon Jan 02 15:04:05 -0700 2006\" RFC822 = \"02 Jan 06 15:04 MST\" RFC822Z = \"02 Jan 06 15:04 -0700\" // RFC822 with numeric zone RFC850 = \"Monday, 02-Jan-06 15:04:05 MST\" RFC1123 = \"Mon, 02 Jan 2006 15:04:05 MST\" RFC1123Z = \"Mon, 02 Jan 2006 15:04:05 -0700\" // RFC1123 with numeric zone RFC3339 = \"2006-01-02T15:04:05Z07:00\" RFC3339Nano = \"2006-01-02T15:04:05.999999999Z07:00\" Kitchen = \"3:04PM\" // Handy time stamps. Stamp = \"Jan _2 15:04:05\" StampMilli = \"Jan _2 15:04:05.000\" StampMicro = \"Jan _2 15:04:05.000000\" StampNano = \"Jan _2 15:04:05.000000000\" ) 在 config.yaml 中可以设置 DateFormat, format 格式为 example: DateFormat: \"Jan 02, 2006 Mon 15:04\" Format Symbol Description Value Monday A full textual representation of the day of the week Monday through Sunday Mon A textual representation of a day, three letters Mon through Sun 2006 A full numeric representation of a year, 4 digits 2017 or 1986 06 A two digit representation of a year 17 or 86 January A full textual representation of a month, such as January or March January through December Jan A short textual representation of a month, three letters January through December 01 Numeric representation of a month, with leading zeros 01 through 12 1 Numeric representation of a month, without leading zeros 1 through 12 02 Day of the month, 2 digits with leading zeros 01 through 31 15 24-hour format of an hour with leading zeros 00 through 24 3 12-hour format of an hour without leading zeros 1 through 12 03 12-hour format of an hour with leading zeros 01 through 12 PM Indicator if AM or PM AM or PM 4 Minutes without leading zeros 1 through 59 04 Minutes with leading zeros 01 through 59 5 Seconds, without leading zeros 1 through 59 05 Seconds, with leading zeros 01 through 59 MST Timezone Example: UTC, MST -0700 Difference to GMT as ±hhmm +0000 -07:00 Difference to GMT as ±hh:mm +00:00 -07 Difference to GMT as ±hh +00 Z0700 Difference to GMT as Z or ±hhmm Z or ±hhmm Z07:00 Difference to GMT as Z or ±hh:mm Z or ±hh:mm Z07 Difference to GMT as Z or ±hh Z or ±hh ","date":"2022-01-28","objectID":"/hugo/:4:0","tags":["hugo"],"title":"Hugo","uri":"/hugo/"}]