#+TITLE: Java
#+date: Sun Mar 13 08:23:05 CST 2022
#+categories[]: program_languages
#+tags[]: java
#+summary: Java


* template
+ template 是 compilation feature, cannot instantiate a template with dynamic class at runtime

* Project
** classpath
+ 访问 resources 也是需要在 *classpath* 中声明的

* Serialize
** Gson
+ Gson 应该是还比较好的方案了吧, 没有什么CVE问题

* Process
** 阻塞
+ process 创建时默认重定向到 pipe, 如果主线程不及时读取 pipe 的内容, pipe buffer 会堵塞

* feature
** format
| Conversion | Argument Category | Description                                                                                                                                                                           |
| 'b', 'B'   | general           | If the argument arg is null, then the result is "false". If arg is a boolean or Boolean, then the result is the string returned by String.valueOf(). Otherwise, the result is "true". |
| 'h', 'H'   | general           | If the argument arg is null, then the result is "null". Otherwise, the result is obtained by invoking Integer.toHexString(arg.hashCode()).                                            |
| 's', 'S'   | general           | If the argument arg is null, then the result is "null". If arg implements Formattable, then arg.formatTo is invoked. Otherwise, the result is obtained by invoking arg.toString().    |
| 'c', 'C'   | character         | The result is a Unicode character                                                                                                                                                     |
| 'd'        | integral          | The result is formatted as a decimal integer                                                                                                                                          |
| 'o'        | integral          | The result is formatted as an octal integer                                                                                                                                           |
| 'x', 'X'   | integral          | The result is formatted as a hexadecimal integer                                                                                                                                      |
| 'e', 'E'   | floating point    | The result is formatted as a decimal number in computerized scientific notation                                                                                                       |
| 'f'        | floating point    | The result is formatted as a decimal number                                                                                                                                           |
| 'g', 'G'   | floating point    | The result is formatted using computerized scientific notation or decimal format, depending on the precision and the value after rounding.                                            |
| 'a', 'A'   | floating point    | The result is formatted as a hexadecimal floating-point number with a significand and an exponent                                                                                     |
| 't', 'T'   | date/time         | Prefix for date and time conversion characters. See Date/Time Conversions.                                                                                                            |
| '%'        | percent           | The result is a literal '%' ('\u0025')                                                                                                                                                |
| 'n'        | line separator    | The result is the platform-specific line separator                                                                                                                                    |

** iterator
*** iterator and remove
#+begin_src java
for(Iterator<Map.Entry<String, String>> it = map.entrySet().iterator(); it.hasNext(); ) {
    Map.Entry<String, String> entry = it.next();
    if(entry.getKey().equals("")) {
        it.remove();
    }
}
#+end_src

* File
** Path
+ 一般直接用 Path 处理路径
+ Path.toFile() 直接转 File
** Write to File
*** BufferedWriter 写 String
#+begin_src java
String str = "Hello";
BufferedWriter writer = new BufferedWriter(new FileWriter(fileName));
writer.write(str);
writer.close();
#+end_src
*** FileOutputStream 写 bytes
#+begin_src java
String str = "Hello";
FileOutputStream outputStream = new FileOutputStream(fileName);
byte[] strToBytes = str.getBytes();
outputStream.write(strToBytes);
outputStream.close();
#+end_src

* Reflect

** from class
#+begin_src java
Field[] allFields = Person.class.getDeclaredFields();

assertEquals(2, allFields.length);

assertTrue(Arrays.stream(allFields).anyMatch(field ->
                                             field.getName().equals(LAST_NAME_FIELD)
                                             && field.getType().equals(String.class)));
assertTrue(Arrays.stream(allFields).anyMatch(field ->
                                             field.getName().equals(FIRST_NAME_FIELD)
                                             && field.getType().equals(String.class)));
#+end_src
